mtext(
texto,
outer = TRUE,
cex = 1.5,  # Tamaño del texto
font = 2    # Estilo en negrita
)
# Restablecer la configuración gráfica por defecto
par(mfrow = c(1, 1))
# Calcular la correlación entre todas las combinaciones de años y almacenar en una matriz 6x6
correlacion_matriz <- matrix(NA, nrow = length(anios), ncol = length(anios), dimnames = list(anios, anios))
for (i in 1:length(anios)) {
for (j in 1:length(anios)) {
matriz_i <- as.vector(correlaciones_lista[[anios[i]]])
matriz_j <- as.vector(correlaciones_lista[[anios[j]]])
correlacion_matriz[i, j] <- cor(matriz_i, matriz_j, use = "complete.obs")
}
}
print(correlacion_matriz)
# Convertir la matriz a formato largo para ggplot2
correlacion_df <- melt(correlacion_matriz, varnames = c("Año1", "Año2"), value.name = "Correlacion")
print(correlacion_df)
# Crear el gráfico de calor
grafico <- ggplot(correlacion_df, aes(x = Año1, y = Año2, fill = Correlacion)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", mid = "yellow", high = "green", midpoint = 0) +
geom_text(aes(label = round(Correlacion, 2)), color = "black", size = 3) + # Añadir valores redondeados en los recuadros
labs(
title = "Correlación entre matrices de correlación entre años",
x = "Año",
y = "Año"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mtext(
texto,
outer = TRUE,
cex = 1.5,  # Tamaño del texto
font = 2    # Estilo en negrita
)
print(grafico)
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista))
}
resultados_in <- resultados_iteracion(datos, "io")
resultados_in <- resultados_iteracion(datos, "io")
# -------------------------------------- #
# Colorear regiones según porcentaje
# -------------------------------------- #
calcular_y_graficar_correlaciones <- function(lista_resultados_combinados_in, anios, orientacion) {
# Instalar y cargar las librerías necesarias
if (!require(corrplot)) install.packages("corrplot")
library(corrplot)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(reshape2)) install.packages("reshape2")
library(ggplot2)
library(reshape2)
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Definir la cuadrícula de gráficos para las matrices de correlación
num_graficos <- length(correlaciones_lista)
filas <- ceiling(sqrt(num_graficos))
columnas <- ceiling(num_graficos / filas)
# Ajustar la ventana gráfica y definir una configuración para múltiples gráficos
colores_personalizados <- colorRampPalette(c("red", "yellow", "green"))(200)  # De rojo (mínimo) a verde (máximo)
par(mfrow = c(filas, columnas), mar = c(2, 2, 2, 2), oma = c(4, 4, 4, 4))  # Ajustar márgenes (oma es el margen externo)
# Crear las gráficas
for (anio in names(correlaciones_lista)) {
corrplot(
correlaciones_lista[[anio]],
col = colores_personalizados,
method = "color",
title = paste("Matriz de Correlación - Año", anio),
mar = c(0, 0, 2, 0)  # Márgenes más pequeños para cada gráfico
)
}
if (orientacion == "io"){
texto <- "Matrices de correlación de métodos orientado a entradas por año"
}else{
texto <- "Matrices de correlación de métodos orientado a salidas por año"
}
# Agregar un título general
mtext(
texto,
outer = TRUE,
cex = 1.5,  # Tamaño del texto
font = 2    # Estilo en negrita
)
# Restablecer la configuración gráfica por defecto
par(mfrow = c(1, 1))
# Calcular la correlación entre todas las combinaciones de años y almacenar en una matriz 6x6
correlacion_matriz <- matrix(NA, nrow = length(anios), ncol = length(anios), dimnames = list(anios, anios))
for (i in 1:length(anios)) {
for (j in 1:length(anios)) {
matriz_i <- as.vector(correlaciones_lista[[anios[i]]])
matriz_j <- as.vector(correlaciones_lista[[anios[j]]])
correlacion_matriz[i, j] <- cor(matriz_i, matriz_j, use = "complete.obs")
}
}
print(correlacion_matriz)
# Convertir la matriz a formato largo para ggplot2
correlacion_df <- melt(correlacion_matriz, varnames = c("Año1", "Año2"), value.name = "Correlacion")
print(correlacion_df)
# Crear el gráfico de calor
grafico <- ggplot(correlacion_df, aes(x = Año1, y = Año2, fill = Correlacion)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", mid = "yellow", high = "green", midpoint = 0) +
geom_text(aes(label = round(Correlacion, 2)), color = "black", size = 3) + # Añadir valores redondeados en los recuadros
labs(
title = "Correlación entre matrices de correlación entre años",
x = "Año",
y = "Año"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5) # Cambiar tamaño y estilo del título
)
print(grafico)
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista))
}
resultados_in <- resultados_iteracion(datos, "io")
# -------------------------------------- #
# Colorear regiones según porcentaje
# -------------------------------------- #
calcular_y_graficar_correlaciones <- function(lista_resultados_combinados_in, anios, orientacion) {
# Instalar y cargar las librerías necesarias
if (!require(corrplot)) install.packages("corrplot")
library(corrplot)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(reshape2)) install.packages("reshape2")
library(ggplot2)
library(reshape2)
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Definir la cuadrícula de gráficos para las matrices de correlación
num_graficos <- length(correlaciones_lista)
filas <- ceiling(sqrt(num_graficos))
columnas <- ceiling(num_graficos / filas)
# Ajustar la ventana gráfica y definir una configuración para múltiples gráficos
colores_personalizados <- colorRampPalette(c("red", "yellow", "green"))(200)  # De rojo (mínimo) a verde (máximo)
par(mfrow = c(filas, columnas), mar = c(2, 2, 2, 2), oma = c(4, 4, 4, 4))  # Ajustar márgenes (oma es el margen externo)
# Crear las gráficas
for (anio in names(correlaciones_lista)) {
corrplot(
correlaciones_lista[[anio]],
col = colores_personalizados,
method = "color",
title = paste("Matriz de Correlación - Año", anio),
mar = c(0, 0, 2, 0)  # Márgenes más pequeños para cada gráfico
)
}
if (orientacion == "io"){
texto <- "Matrices de correlación de métodos orientado a entradas por año"
}else{
texto <- "Matrices de correlación de métodos orientado a salidas por año"
}
# Agregar un título general
mtext(
texto,
outer = TRUE,
cex = 1.5,  # Tamaño del texto
font = 2    # Estilo en negrita
)
# Restablecer la configuración gráfica por defecto
par(mfrow = c(1, 1))
# Calcular la correlación entre todas las combinaciones de años y almacenar en una matriz 6x6
correlacion_matriz <- matrix(NA, nrow = length(anios), ncol = length(anios), dimnames = list(anios, anios))
for (i in 1:length(anios)) {
for (j in 1:length(anios)) {
matriz_i <- as.vector(correlaciones_lista[[anios[i]]])
matriz_j <- as.vector(correlaciones_lista[[anios[j]]])
correlacion_matriz[i, j] <- cor(matriz_i, matriz_j, use = "complete.obs")
}
}
print(correlacion_matriz)
# Convertir la matriz a formato largo para ggplot2
correlacion_df <- melt(correlacion_matriz, varnames = c("Año1", "Año2"), value.name = "Correlacion")
print(correlacion_df)
grafico <- ggplot(correlacion_df, aes(x = Año1, y = Año2, fill = Correlacion)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", mid = "yellow", high = "green", midpoint = 0) +
geom_text(aes(label = round(Correlacion, 2)), color = "black", size = 3) + # Añadir valores redondeados en los recuadros
labs(
title = "Correlación entre matrices de correlación entre años",
x = "Año",
y = "Año"
) +
scale_x_continuous(breaks = unique(correlacion_df$Año1)) + # Mostrar todos los años en el eje X
scale_y_continuous(breaks = unique(correlacion_df$Año2)) + # Mostrar todos los años en el eje Y
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5) # Cambiar tamaño y estilo del título
)
print(grafico)
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista))
}
resultados_in <- resultados_iteracion(datos, "io")
# -------------------------------------- #
# Colorear regiones según porcentaje
# -------------------------------------- #
calcular_y_graficar_correlaciones <- function(lista_resultados_combinados_in, anios, orientacion) {
# Instalar y cargar las librerías necesarias
if (!require(corrplot)) install.packages("corrplot")
library(corrplot)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(reshape2)) install.packages("reshape2")
library(ggplot2)
library(reshape2)
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Definir la cuadrícula de gráficos para las matrices de correlación
num_graficos <- length(correlaciones_lista)
filas <- ceiling(sqrt(num_graficos))
columnas <- ceiling(num_graficos / filas)
# Ajustar la ventana gráfica y definir una configuración para múltiples gráficos
colores_personalizados <- colorRampPalette(c("red", "yellow", "green"))(200)  # De rojo (mínimo) a verde (máximo)
par(mfrow = c(filas, columnas), mar = c(2, 2, 2, 2), oma = c(4, 4, 4, 4))  # Ajustar márgenes (oma es el margen externo)
# Crear las gráficas
for (anio in names(correlaciones_lista)) {
corrplot(
correlaciones_lista[[anio]],
col = colores_personalizados,
method = "color",
title = paste("Matriz de Correlación - Año", anio),
mar = c(0, 0, 2, 0)  # Márgenes más pequeños para cada gráfico
)
}
if (orientacion == "io"){
texto <- "Matrices de correlación de métodos orientado a entradas por año"
texto2 <- "Correlación entre matrices de correlación entre años \n Orientado a entradas"
}else{
texto <- "Matrices de correlación de métodos orientado a salidas por año"
texto2 <- "Correlación entre matrices de correlación entre años \n Orientado a salidas"
}
# Agregar un título general
mtext(
texto,
outer = TRUE,
cex = 1.5,  # Tamaño del texto
font = 2    # Estilo en negrita
)
# Restablecer la configuración gráfica por defecto
par(mfrow = c(1, 1))
# Calcular la correlación entre todas las combinaciones de años y almacenar en una matriz 6x6
correlacion_matriz <- matrix(NA, nrow = length(anios), ncol = length(anios), dimnames = list(anios, anios))
for (i in 1:length(anios)) {
for (j in 1:length(anios)) {
matriz_i <- as.vector(correlaciones_lista[[anios[i]]])
matriz_j <- as.vector(correlaciones_lista[[anios[j]]])
correlacion_matriz[i, j] <- cor(matriz_i, matriz_j, use = "complete.obs")
}
}
print(correlacion_matriz)
# Convertir la matriz a formato largo para ggplot2
correlacion_df <- melt(correlacion_matriz, varnames = c("Año1", "Año2"), value.name = "Correlacion")
print(correlacion_df)
grafico <- ggplot(correlacion_df, aes(x = Año1, y = Año2, fill = Correlacion)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", mid = "yellow", high = "green", midpoint = 0) +
geom_text(aes(label = round(Correlacion, 2)), color = "black", size = 3) + # Añadir valores redondeados en los recuadros
labs(
title = texto2,
x = "Año",
y = "Año"
) +
scale_x_continuous(breaks = unique(correlacion_df$Año1)) + # Mostrar todos los años en el eje X
scale_y_continuous(breaks = unique(correlacion_df$Año2)) + # Mostrar todos los años en el eje Y
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5) # Cambiar tamaño y estilo del título
)
print(grafico)
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista))
}
resultados_in <- resultados_iteracion(datos, "io")
resultados_out <- resultados_iteracion(datos, "oo")
input_output_original <- combinar_resultados_in_out(resultados_in[["original"]], resultados_out[["original"]])
graficas_in_out <- calcular_y_graficar_correlaciones(input_output_original, anios)
if (orientacion == "io"){
texto <- "Matrices de correlación de métodos orientado a entradas por año"
texto2 <- "Correlación entre matrices de correlación entre años \n Orientado a entradas"
else if (orientacion == "oo"){
if (orientacion == "io"){
texto <- "Matrices de correlación de métodos orientado a entradas por año"
texto2 <- "Correlación entre matrices de correlación entre años \n Orientado a entradas"
else (orientacion == "oo"){
if (orientacion == "io"){
texto <- "Matrices de correlación de métodos orientado a entradas por año"
texto2 <- "Correlación entre matrices de correlación entre años \n Orientado a entradas"
else (orientacion == "oo"){
if (orientacion == "io"){
texto <- "Matrices de correlación de métodos orientado a entradas por año"
texto2 <- "Correlación entre matrices de correlación entre años \n Orientado a entradas"
if-else (orientacion == "oo"){
# -------------------------------------- #
# Colorear regiones según porcentaje
# -------------------------------------- #
calcular_y_graficar_correlaciones <- function(lista_resultados_combinados_in, anios, orientacion) {
# Instalar y cargar las librerías necesarias
if (!require(corrplot)) install.packages("corrplot")
library(corrplot)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(reshape2)) install.packages("reshape2")
library(ggplot2)
library(reshape2)
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Definir la cuadrícula de gráficos para las matrices de correlación
num_graficos <- length(correlaciones_lista)
filas <- ceiling(sqrt(num_graficos))
columnas <- ceiling(num_graficos / filas)
# Ajustar la ventana gráfica y definir una configuración para múltiples gráficos
colores_personalizados <- colorRampPalette(c("red", "yellow", "green"))(200)  # De rojo (mínimo) a verde (máximo)
par(mfrow = c(filas, columnas), mar = c(2, 2, 2, 2), oma = c(4, 4, 4, 4))  # Ajustar márgenes (oma es el margen externo)
# Crear las gráficas
for (anio in names(correlaciones_lista)) {
corrplot(
correlaciones_lista[[anio]],
col = colores_personalizados,
method = "color",
title = paste("Matriz de Correlación - Año", anio),
mar = c(0, 0, 2, 0)  # Márgenes más pequeños para cada gráfico
)
}
if (orientacion == "io"){
texto <- "Matrices de correlación de métodos orientado a entradas por año"
texto2 <- "Correlación entre matrices de correlación entre años \n Orientado a entradas"
}else if (orientacion == "oo"){
texto <- "Matrices de correlación de métodos orientado a salidas por año"
texto2 <- "Correlación entre matrices de correlación entre años \n Orientado a salidas"
}else{
texto <- "Matrices de correlación de métodos por año"
texto2 <- "Correlación entre matrices de correlación entre años"
}
# Agregar un título general
mtext(
texto,
outer = TRUE,
cex = 1.5,  # Tamaño del texto
font = 2    # Estilo en negrita
)
# Restablecer la configuración gráfica por defecto
par(mfrow = c(1, 1))
# Calcular la correlación entre todas las combinaciones de años y almacenar en una matriz 6x6
correlacion_matriz <- matrix(NA, nrow = length(anios), ncol = length(anios), dimnames = list(anios, anios))
for (i in 1:length(anios)) {
for (j in 1:length(anios)) {
matriz_i <- as.vector(correlaciones_lista[[anios[i]]])
matriz_j <- as.vector(correlaciones_lista[[anios[j]]])
correlacion_matriz[i, j] <- cor(matriz_i, matriz_j, use = "complete.obs")
}
}
print(correlacion_matriz)
# Convertir la matriz a formato largo para ggplot2
correlacion_df <- melt(correlacion_matriz, varnames = c("Año1", "Año2"), value.name = "Correlacion")
print(correlacion_df)
grafico <- ggplot(correlacion_df, aes(x = Año1, y = Año2, fill = Correlacion)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", mid = "yellow", high = "green", midpoint = 0) +
geom_text(aes(label = round(Correlacion, 2)), color = "black", size = 3) + # Añadir valores redondeados en los recuadros
labs(
title = texto2,
x = "Año",
y = "Año"
) +
scale_x_continuous(breaks = unique(correlacion_df$Año1)) + # Mostrar todos los años en el eje X
scale_y_continuous(breaks = unique(correlacion_df$Año2)) + # Mostrar todos los años en el eje Y
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5) # Cambiar tamaño y estilo del título
)
print(grafico)
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista))
}
graficas_in_out <- calcular_y_graficar_correlaciones(input_output_original, anios, orientacion)
graficas_in_out <- calcular_y_graficar_correlaciones(input_output_original, anios, "ambos")
input_output_original <- combinar_resultados_in_out(resultados_in[["original"]], resultados_out[["original"]])
graficas_in_out <- calcular_y_graficar_correlaciones(input_output_original, anios, "ambos")
datos_cut_in_vrs <- lapply(datos, function(df) {df %>% filter(!(IdEstablecimiento %in% resultados_in[["vector_outliers_vrs"]]))})
datos_cut_in_crs <- lapply(datos, function(df) {df %>% filter(!(IdEstablecimiento %in% resultados_in[["vector_outliers_crs"]]))})
resultados_in_cut_vrs <- resultados_iteracion(datos_cut_in_vrs, "io")
resultados_in_cut_crs <- resultados_iteracion(datos_cut_in_crs, "io")
datos_cut_out_vrs <- lapply(datos, function(df) {df %>% filter(!(IdEstablecimiento %in% resultados_out[["vector_outliers_vrs"]]))})
datos_cut_out_crs <- lapply(datos, function(df) {df %>% filter(!(IdEstablecimiento %in% resultados_out[["vector_outliers_crs"]]))})
resultados_out_cut_vrs <- resultados_iteracion(datos_cut_out_vrs, "oo")
resultados_out_cut_crs <- resultados_iteracion(datos_cut_out_crs, "oo")
# Crear dataframes base de ID
in_vrs_df <- data.frame(ID = resultados_in[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
in_crs_df <- data.frame(ID = resultados_in[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
out_vrs_df <- data.frame(ID = resultados_out[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
out_crs_df <- data.frame(ID = resultados_out[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
in_vrs_por_anio_cut <- data.frame(ID = resultados_in_cut_vrs[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
in_crs_por_anio_cut <- data.frame(ID = resultados_in_cut_crs[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
out_vrs_por_anio_cut <- data.frame(ID = resultados_out_cut_vrs[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
out_crs_por_anio_cut <- data.frame(ID = resultados_out_cut_crs[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
# Llenar los dataframes con los valores de VRS y CRS por cada año
for (year in names(resultados_in[["original"]])) {
in_vrs_df[[year]] <- resultados_in[["original"]][[year]][["data"]][["vrs"]]
in_crs_df[[year]] <- resultados_in[["original"]][[year]][["data"]][["crs"]]
in_vrs_por_anio_cut[[year]] <- resultados_in_cut_vrs[["original"]][[year]][["data"]][["vrs"]]
in_crs_por_anio_cut[[year]] <- resultados_in_cut_crs[["original"]][[year]][["data"]][["crs"]]
out_vrs_df[[year]] <- resultados_out[["original"]][[year]][["data"]][["vrs"]]
out_crs_df[[year]] <- resultados_out[["original"]][[year]][["data"]][["crs"]]
out_vrs_por_anio_cut[[year]] <- resultados_out_cut_vrs[["original"]][[year]][["data"]][["vrs"]]
out_crs_por_anio_cut[[year]] <- resultados_out_cut_crs[["original"]][[year]][["data"]][["crs"]]
}
# Calcular las correlaciones
correlaciones_in_vrs <- calcular_correlaciones(in_vrs_df, in_vrs_por_anio_cut)
correlaciones_in_crs <- calcular_correlaciones(in_crs_df, in_crs_por_anio_cut)
correlaciones_out_vrs <- calcular_correlaciones(out_vrs_df, out_vrs_por_anio_cut)
correlaciones_out_crs <- calcular_correlaciones(out_crs_df, out_crs_por_anio_cut)
print(correlaciones_in_vrs)
print(correlaciones_in_crs)
print(correlaciones_out_vrs)
print(correlaciones_out_crs)
malmquist_in_vrs <- calcular_malmquist(datos, "vrs", "in")
malmquist_in_crs <- calcular_malmquist(datos, "crs", "in")
malmquist_out_vrs <- calcular_malmquist(datos, "vrs", "out")
malmquist_out_crs <- calcular_malmquist(datos, "crs", "out")
malmquist_in_vrs[["index"]][, -1] <- lapply(malmquist_in_vrs[["index"]][, -1], as.numeric)
# Calcular la tasa de crecimiento año a año
tasa_crecimiento <- malmquist_in_vrs[["index"]]
#tasa_crecimiento_pre <- malmquist_in_vrs[["index"]][, -ncol(malmquist_in_vrs[["index"]])]
for (i in 3:ncol(malmquist_in_vrs[["index"]])) {
tasa_crecimiento[[i]] <- (malmquist_in_vrs[["index"]][[i]] - malmquist_in_vrs[["index"]][[i-1]]) / malmquist_in_vrs[["index"]][[i-1]]
#tasa_crecimiento_pre[[i]] <- (malmquist_in_vrs[["index"]][[i]] - malmquist_in_vrs[["index"]][[i-1]]) / malmquist_in_vrs[["index"]][[i-1]]
}
colnames(tasa_crecimiento)[-1] <- paste0("Crecimiento_", colnames(malmquist_in_vrs[["index"]])[-1])
tasa_promedio <- rowMeans(tasa_crecimiento[, -1], na.rm = TRUE)
tasa_crecimiento$Tasa_Promedio_Pre_Pandemia <- tasa_promedio
mejores_25 <- list("in_vrs" =top_eficiencia(resultados_in, "vrs", 25, TRUE),
"in_crs" = top_eficiencia(resultados_in, "crs", 25, TRUE),
"out_vrs" = top_eficiencia(resultados_out, "vrs", 25, TRUE),
"out_crs" = top_eficiencia(resultados_out, "crs", 25, TRUE))
resumen <- resumen_eficiencia(mejores_25$in_vrs)
colorear_region(resumen)
grafica <- generar_graficos_iteracion(resultados_in[["original"]], "Input VRS", "vrs", "in")
print(grafica)
View(tasa_crecimiento)
View(malmquist_in_vrs)
colnames(malmquist_in_vrs[["index"]]
)
colnames(malmquist_in_vrs[["index"]])[-1]
# Calcular la tasa de crecimiento año a año
tasa_crecimiento <- malmquist_in_vrs[["index"]]
View(tasa_crecimiento)
columnas <- colnames(malmquist_in_vrs[["index"]])[-1]
columnas
nuevos_nombres <- paste(columnas[-length(columnas)], columnas[-1], sep = "_")
nuevos_nombres
columnas <- colnames(malmquist_in_vrs[["index"]])[-1]
nuevos_nombres <- paste(columnas[-length(columnas)], columnas[-1], sep = "_")
nuevos_nombres <- c("2014_2015", nuevos_nombres)
nuevos_nombres
colnames(tasa_crecimiento)[-1] <- nuevos_nombres
View(tasa_crecimiento)
tasa_promedio <- rowMeans(tasa_crecimiento[, -1], na.rm = TRUE)
tasa_crecimiento$Tasa_Promedio_Pre_Pandemia <- tasa_promedio
tasa_promedio <- rowMeans(tasa_crecimiento[, -c(1, ncol(tasa_crecimiento))], na.rm = TRUE)
tasa_crecimiento$Tasa_Promedio_Pre_Pandemia <- tasa_promedio
# Calcular la tasa de crecimiento año a año
tasa_crecimiento <- malmquist_in_vrs[["index"]]
#tasa_crecimiento_pre <- malmquist_in_vrs[["index"]][, -ncol(malmquist_in_vrs[["index"]])]
for (i in 3:ncol(malmquist_in_vrs[["index"]])) {
tasa_crecimiento[[i]] <- (malmquist_in_vrs[["index"]][[i]] - malmquist_in_vrs[["index"]][[i-1]]) / malmquist_in_vrs[["index"]][[i-1]]
#tasa_crecimiento_pre[[i]] <- (malmquist_in_vrs[["index"]][[i]] - malmquist_in_vrs[["index"]][[i-1]]) / malmquist_in_vrs[["index"]][[i-1]]
}
columnas <- colnames(malmquist_in_vrs[["index"]])[-1]
nuevos_nombres <- paste(columnas[-length(columnas)], columnas[-1], sep = "_")
nuevos_nombres <- c("2014_2015", nuevos_nombres)
colnames(tasa_crecimiento)[-1] <- nuevos_nombres
tasa_promedio <- rowMeans(tasa_crecimiento[, -c(1, ncol(tasa_crecimiento))], na.rm = TRUE)
tasa_crecimiento$Tasa_Promedio_Pre_Pandemia <- tasa_promedio
