posiciones[[año]] <- data.frame(
IdEstablecimiento = df_año$IdEstablecimiento,
Region = df_año$Region,
IDRegion = df_año$region_id,
Posicion = seq_len(nrow(df_año)),
Año = año
)
# Calculamos el porcentaje de ocurrencia de cada región
porcentaje_region <- as.data.frame(prop.table(table(df_año$Region)) * 100)
colnames(porcentaje_region) <- c("Region", "Porcentaje")
# Añadimos la columna IDRegion basada en la relación con la región
id_region <- unique(df_año[, c("Region", "region_id")])
porcentaje_region <- merge(porcentaje_region, id_region, by = "Region")
porcentaje_region$Año <- año
porcentajes[[año]] <- porcentaje_region
}
# Unimos todas las posiciones en un solo dataframe
posiciones_df <- do.call(rbind, posiciones)
# Transformamos posiciones_df para que cada columna sea un año
posiciones_wide <- posiciones_df %>%
pivot_wider(names_from = Año, values_from = Posicion)
# Unimos todos los porcentajes en un solo dataframe
porcentajes_df <- do.call(rbind, porcentajes)
# Transformamos porcentajes_df para que cada columna sea un año y conservamos IDRegion
porcentajes_wide <- porcentajes_df %>%
pivot_wider(names_from = Año, values_from = Porcentaje, values_fill = list(Porcentaje = 0))
# Retornamos una lista con los resultados
list(Posiciones = posiciones_wide, Porcentajes = porcentajes_wide)
}
# Ejemplo de uso
resumen <- resumen_eficiencia(mejores_25$in_vrs)
View(resumen)
View(resumen[["Porcentajes"]])
chile_comunas <- chilemapas::mapa_comunas
# Convertir el mapa a nivel de regiones, agrupando las comunas por región
chile_regiones <- chile_comunas %>%
group_by(codigo_region) %>%
summarize(geometry = st_union(geometry), .groups = "drop") %>%
st_as_sf()
# Asegurarse de que la columna IDRegion en los datos de porcentaje sea de tipo character
resumen$Porcentajes <- resumen$Porcentajes %>%
mutate(IDRegion = as.character(IDRegion))
# Asegurarse de que la columna IDRegion en los datos de porcentaje sea de tipo character
resumen$Porcentajes <- resumen$Porcentajes %>%
mutate(region_id = as.character(IDRegion))
# Asegurarse de que la columna IDRegion en los datos de porcentaje sea de tipo character
resumen$Porcentajes <- resumen$Porcentajes %>%
mutate(region_id = as.character(region_id))
# Unir el dataframe de porcentajes con el mapa de Chile usando el IDRegion
chile_porcentaje <- chile_regiones %>%
left_join(resumen$Porcentajes, by = c("codigo_region" = "region_id"))
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[3:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal() +
ggsave(paste0("mapa_chile_", year, ".png"))
}
library(ggplot2)
library(sf)
library(dplyr)
library(tidyr)
library(chilemapas)
chile_comunas <- chilemapas::mapa_comunas
# Convertir el mapa a nivel de regiones, agrupando las comunas por región
chile_regiones <- chile_comunas %>%
group_by(codigo_region) %>%
summarize(geometry = st_union(geometry), .groups = "drop") %>%
st_as_sf()
# Asegurarse de que la columna IDRegion en los datos de porcentaje sea de tipo character
resumen$Porcentajes <- resumen$Porcentajes %>%
mutate(region_id = as.character(region_id))
# Unir el dataframe de porcentajes con el mapa de Chile usando el IDRegion
chile_porcentaje <- chile_regiones %>%
left_join(resumen$Porcentajes, by = c("codigo_region" = "region_id"))
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[3:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal() +
ggsave(paste0("mapa_chile_", year, ".png"))
}
chile_porcentaje <- chile_porcentaje %>%
mutate(across(starts_with("20"), as.numeric))  # Cambia "20" si tus columnas de año tienen otro prefijo
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[3:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal() +
ggsave(paste0("mapa_chile_", year, ".png"))
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[3:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal() +
ggsave(paste0("mapa_chile_", year, ".png"))
}
View(chile_porcentaje)
chile_porcentaje <- chile_porcentaje %>%
filter(!is.na(Region)) %>%
mutate(across(starts_with("20"), as.numeric))  # Cambia "20" si tus columnas de año tienen otro prefijo
View(chile_porcentaje)
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[3:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal() +
ggsave(paste0("mapa_chile_", year, ".png"))
}
for (year in names(chile_porcentaje)[which(names(chile_porcentaje) == "2014"):ncol(chile_porcentaje)]) { # Ajusta según los nombres de tus columnas de año
ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal() +
ggsave(paste0("mapa_chile_", year, ".png"))
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal() +
ggsave(paste0("mapa_chile_", year, ".png"))
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
g <- ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
print(g)
}
# Unir el dataframe de porcentajes con el mapa de Chile usando el IDRegion
chile_porcentaje <- chile_regiones %>%
left_join(resumen$Porcentajes, by = c("codigo_region" = "region_id"))
chile_porcentaje <- chile_porcentaje %>%
#filter(!is.na(Region)) %>%
mutate(across(starts_with("20"), as.numeric))  # Cambia "20" si tus columnas de año tienen otro prefijo
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
g <- ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
print(g)
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
print(year)
g <- ggplot(data = chile_porcentaje) +
geom_sf(aes_string(fill = year), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
print(g)
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
print(year)
g <- ggplot(data = chile_porcentaje) +
geom_sf(aes(fill = !!sym(year)), color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
print(g)
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
print(year)
g <- ggplot(data = chile_porcentaje) +
geom_sf(aes(fill = !!sym(year)), color = "black") +
scale_fill_gradient(low = "red", high = "green", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
print(g)
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
print(year)
g <- ggplot(data = chile_porcentaje) +
geom_sf(aes(fill = !!sym(year)), color = "black") +
scale_fill_gradient(low = "#b2d8b2", high = "#006400", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
print(g)
}
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
g <- ggplot(data = chile_porcentaje) +
geom_sf(aes(fill = !!sym(year)), color = "black") +
scale_fill_gradient(low = "#b2d8b2", high = "green", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
print(g)
}
resumen_eficiencia <- function(datos) {
# Lista para almacenar las posiciones por establecimiento
posiciones <- list()
# Lista para almacenar los porcentajes por región
porcentajes <- list()
# Iteramos sobre cada año
for (año in names(datos)) {
df_año <- datos[[año]]
# Guardamos la posición de cada establecimiento
posiciones[[año]] <- data.frame(
IdEstablecimiento = df_año$IdEstablecimiento,
Region = df_año$Region,
IDRegion = df_año$region_id,
Posicion = seq_len(nrow(df_año)),
Año = año
)
# Calculamos el porcentaje de ocurrencia de cada región
porcentaje_region <- as.data.frame(prop.table(table(df_año$Region)) * 100)
colnames(porcentaje_region) <- c("Region", "Porcentaje")
# Añadimos la columna IDRegion basada en la relación con la región
id_region <- unique(df_año[, c("Region", "region_id")])
porcentaje_region <- merge(porcentaje_region, id_region, by = "Region")
porcentaje_region$Año <- año
porcentajes[[año]] <- porcentaje_region
}
# Unimos todas las posiciones en un solo dataframe
posiciones_df <- do.call(rbind, posiciones)
# Transformamos posiciones_df para que cada columna sea un año
posiciones_wide <- posiciones_df %>%
pivot_wider(names_from = Año, values_from = Posicion)
# Unimos todos los porcentajes en un solo dataframe
porcentajes_df <- do.call(rbind, porcentajes)
# Transformamos porcentajes_df para que cada columna sea un año y conservamos IDRegion
porcentajes_wide <- porcentajes_df %>%
pivot_wider(names_from = Año, values_from = Porcentaje, values_fill = list(Porcentaje = 0))
# Retornamos una lista con los resultados
list(Posiciones = posiciones_wide, Porcentajes = porcentajes_wide)
}
colorear_region <- function(resumen){
chile_comunas <- chilemapas::mapa_comunas
# Convertir el mapa a nivel de regiones, agrupando las comunas por región
chile_regiones <- chile_comunas %>%
group_by(codigo_region) %>%
summarize(geometry = st_union(geometry), .groups = "drop") %>%
st_as_sf()
# Asegurarse de que la columna IDRegion en los datos de porcentaje sea de tipo character
resumen$Porcentajes <- resumen$Porcentajes %>%
mutate(region_id = as.character(region_id))
# Unir el dataframe de porcentajes con el mapa de Chile usando el IDRegion
chile_porcentaje <- chile_regiones %>%
left_join(resumen$Porcentajes, by = c("codigo_region" = "region_id"))
chile_porcentaje <- chile_porcentaje %>%
#filter(!is.na(Region)) %>%
mutate(across(starts_with("20"), as.numeric))  # Cambia "20" si tus columnas de año tienen otro prefijo
# Generar un gráfico para cada año
for (year in names(chile_porcentaje)[4:ncol(chile_porcentaje)]) { # Ajusta el índice según las columnas de año en tu data
g <- ggplot(data = chile_porcentaje) +
geom_sf(aes(fill = !!sym(year)), color = "black") +
scale_fill_gradient(low = "#b2d8b2", high = "green", na.value = "white") +
labs(title = paste("Mapa de Chile - Año", year), fill = "Porcentaje") +
theme_minimal()
#+  ggsave(paste0("mapa_chile_", year, ".png"))
print(g)
}
}
colorear_region(resumen)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ----------------------------------------------- #
# -------------------------------------------- #
#  CONSOLIDADO DE DATOS POR AÑO
# -------------------------------------------- #
anios <- c("2014", "2015", "2016", "2017", "2018", "2019","2020")
datos_iniciales <- list(
"2014" = consolidar_datos_por_anio(2014),
"2015" = consolidar_datos_por_anio(2015),
"2016" = consolidar_datos_por_anio(2016),
"2017" = consolidar_datos_por_anio(2017),
"2018" = consolidar_datos_por_anio(2018),
"2019" = consolidar_datos_por_anio(2019),
"2020" = consolidar_datos_por_anio(2020)
)
# Encontrar las DMUs comunes en todos los años y filtrar los datos para incluir solo esas DMUs
dmus_comunes <- Reduce(intersect, lapply(datos_iniciales, `[[`, "IdEstablecimiento"))
datos <- lapply(datos_iniciales, function(data) data[data$IdEstablecimiento %in% dmus_comunes, ])
# -------------------------------------------- #
#  CÁLCULO DEA INPUT
# -------------------------------------------- #
resultados_in <- resultados_iteracion(datos, "io")
# -------------------------------------------- #
#  CÁLCULO DEA OUTPUT
# -------------------------------------------- #
resultados_out <- resultados_iteracion(datos, "oo")
# -------------------------------------------- #
#  ELIMINACIÓN DE DATOS ATÍPICOS INPUT
# -------------------------------------------- #
datos_cut_in_vrs <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_in[["vector_outliers_vrs"]]))
})
datos_cut_in_crs <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_in[["vector_outliers_crs"]]))
})
resultados_in_cut_vrs <- resultados_iteracion(datos_cut_in_vrs, "io")
resultados_in_cut_crs <- resultados_iteracion(datos_cut_in_crs, "io")
# -------------------------------------------- #
#  ELIMINACIÓN DE DATOS ATÍPICOS OUTPUT
# -------------------------------------------- #
datos_cut_out_vrs <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_out[["vector_outliers_vrs"]]))
})
datos_cut_out_crs <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_out[["vector_outliers_crs"]]))
})
resultados_out_cut_vrs <- resultados_iteracion(datos_cut_out_vrs, "oo")
resultados_out_cut_crs <- resultados_iteracion(datos_cut_out_crs, "oo")
# -------------------------------------------- #
#    MALMQUIST
# -------------------------------------------- #
malmquist_in_vrs <- calcular_malmquist(datos, "vrs", "in")
malmquist_in_crs <- calcular_malmquist(datos, "crs", "in")
malmquist_out_vrs <- calcular_malmquist(datos, "vrs", "out")
malmquist_out_crs <- calcular_malmquist(datos, "crs", "out")
# -------------------------------------------- #
#    COMPARACIÓN DE METODOS
# -------------------------------------------- #
# Crear un dataframe para almacenar los valores de VRS y CRS por cada año
in_vrs_df <- data.frame(ID = resultados_in[["2014"]][["data"]][["IdEstablecimiento"]])
in_crs_df <- data.frame(ID = resultados_in[["2014"]][["data"]][["IdEstablecimiento"]])
# Iterar sobre cada año para llenar los dataframes
for (year in names(resultados_in)) {
in_vrs_df[[year]] <- resultados_in[[year]][["data"]][["vrs"]]
in_crs_df[[year]] <- resultados_in[[year]][["data"]][["crs"]]
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ----------------------------------------------- #
# -------------------------------------------- #
#  CONSOLIDADO DE DATOS POR AÑO
# -------------------------------------------- #
anios <- c("2014", "2015", "2016", "2017", "2018", "2019","2020")
datos_iniciales <- list(
"2014" = consolidar_datos_por_anio(2014),
"2015" = consolidar_datos_por_anio(2015),
"2016" = consolidar_datos_por_anio(2016),
"2017" = consolidar_datos_por_anio(2017),
"2018" = consolidar_datos_por_anio(2018),
"2019" = consolidar_datos_por_anio(2019),
"2020" = consolidar_datos_por_anio(2020)
)
# Encontrar las DMUs comunes en todos los años y filtrar los datos para incluir solo esas DMUs
dmus_comunes <- Reduce(intersect, lapply(datos_iniciales, `[[`, "IdEstablecimiento"))
datos <- lapply(datos_iniciales, function(data) data[data$IdEstablecimiento %in% dmus_comunes, ])
# -------------------------------------------- #
#  CÁLCULO DEA INPUT
# -------------------------------------------- #
resultados_in <- resultados_iteracion(datos, "io")
# -------------------------------------------- #
#  CÁLCULO DEA OUTPUT
# -------------------------------------------- #
resultados_out <- resultados_iteracion(datos, "oo")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ----------------------------------------------- #
# -------------------------------------------- #
#  CONSOLIDADO DE DATOS POR AÑO
# -------------------------------------------- #
anios <- c("2014", "2015", "2016", "2017", "2018", "2019","2020")
datos_iniciales <- list(
"2014" = consolidar_datos_por_anio(2014),
"2015" = consolidar_datos_por_anio(2015),
"2016" = consolidar_datos_por_anio(2016),
"2017" = consolidar_datos_por_anio(2017),
"2018" = consolidar_datos_por_anio(2018),
"2019" = consolidar_datos_por_anio(2019),
"2020" = consolidar_datos_por_anio(2020)
)
# Encontrar las DMUs comunes en todos los años y filtrar los datos para incluir solo esas DMUs
dmus_comunes <- Reduce(intersect, lapply(datos_iniciales, `[[`, "IdEstablecimiento"))
datos <- lapply(datos_iniciales, function(data) data[data$IdEstablecimiento %in% dmus_comunes, ])
# -------------------------------------------- #
#  CÁLCULO DEA INPUT
# -------------------------------------------- #
resultados_in <- resultados_iteracion(datos, "io")
# -------------------------------------------- #
#  CÁLCULO DEA OUTPUT
# -------------------------------------------- #
resultados_out <- resultados_iteracion(datos, "oo")
# -------------------------------------------- #
#  ELIMINACIÓN DE DATOS ATÍPICOS INPUT
# -------------------------------------------- #
datos_cut_in_vrs <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_in[["vector_outliers_vrs"]]))
})
datos_cut_in_crs <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_in[["vector_outliers_crs"]]))
})
resultados_in_cut_vrs <- resultados_iteracion(datos_cut_in_vrs, "io")
resultados_in_cut_crs <- resultados_iteracion(datos_cut_in_crs, "io")
# -------------------------------------------- #
#  ELIMINACIÓN DE DATOS ATÍPICOS OUTPUT
# -------------------------------------------- #
datos_cut_out_vrs <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_out[["vector_outliers_vrs"]]))
})
datos_cut_out_crs <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_out[["vector_outliers_crs"]]))
})
resultados_out_cut_vrs <- resultados_iteracion(datos_cut_out_vrs, "oo")
resultados_out_cut_crs <- resultados_iteracion(datos_cut_out_crs, "oo")
View(resultados_out)
View(resultados_out[["original"]][["2014"]][["data"]])
View(datos_cut_in_crs)
View(resultados_in)
malmquist_in_vrs <- calcular_malmquist(datos, "vrs", "in")
malmquist_in_crs <- calcular_malmquist(datos, "crs", "in")
malmquist_out_vrs <- calcular_malmquist(datos, "vrs", "out")
malmquist_out_crs <- calcular_malmquist(datos, "crs", "out")
# Crear un dataframe para almacenar los valores de VRS y CRS por cada año
in_vrs_df <- data.frame(ID = resultados_in[["2014"]][["data"]][["IdEstablecimiento"]])
in_crs_df <- data.frame(ID = resultados_in[["2014"]][["data"]][["IdEstablecimiento"]])
# Iterar sobre cada año para llenar los dataframes
for (year in names(resultados_in)) {
in_vrs_df[[year]] <- resultados_in[[year]][["data"]][["vrs"]]
in_crs_df[[year]] <- resultados_in[[year]][["data"]][["crs"]]
}
View(resultados_in)
# Crear un dataframe para almacenar los valores de VRS y CRS por cada año
in_vrs_df <- data.frame(ID = resultados_in[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
in_crs_df <- data.frame(ID = resultados_in[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
# Iterar sobre cada año para llenar los dataframes
for (year in names(resultados_in)) {
in_vrs_df[[year]] <- resultados_in[["original"]][[year]][["data"]][["vrs"]]
in_crs_df[[year]] <- resultados_in[["original"]][[year]][["data"]][["crs"]]
}
out_vrs_df <- data.frame(ID = resultados_out[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
out_crs_df <- data.frame(ID = resultados_out[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
# Iterar sobre cada año para llenar los dataframes
for (year in names(resultados_in)) {
out_vrs_df[[year]] <- resultados_out[["original"]][[year]][["data"]][["vrs"]]
out_crs_df[[year]] <- resultados_out[["original"]][[year]][["data"]][["crs"]]
}
correlaciones <- sapply(names(in_vrs_df)[-1], function(year) {
cor(in_vrs_df[[year]], malmquist_in_vrs[[year]], use = "complete.obs")
})
correlaciones
View(in_crs_df)
# Crear un dataframe para almacenar los valores de VRS y CRS por cada año
in_vrs_df <- data.frame(ID = resultados_in[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
View(in_vrs_df)
# Iterar sobre cada año para llenar los dataframes
for (year in names(resultados_in)) {
print(year)
in_vrs_df[[year]] <- resultados_in[["original"]][[year]][["data"]][["vrs"]]
in_crs_df[[year]] <- resultados_in[["original"]][[year]][["data"]][["crs"]]
}
# Iterar sobre cada año para llenar los dataframes
for (year in names(resultados_in[["original"]])) {
print(year)
in_vrs_df[[year]] <- resultados_in[["original"]][[year]][["data"]][["vrs"]]
in_crs_df[[year]] <- resultados_in[["original"]][[year]][["data"]][["crs"]]
}
View(in_crs_df)
out_vrs_df <- data.frame(ID = resultados_out[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
out_crs_df <- data.frame(ID = resultados_out[["original"]][["2014"]][["data"]][["IdEstablecimiento"]])
# Iterar sobre cada año para llenar los dataframes
for (year in names(resultados_out[["original"]])) {
out_vrs_df[[year]] <- resultados_out[["original"]][[year]][["data"]][["vrs"]]
out_crs_df[[year]] <- resultados_out[["original"]][[year]][["data"]][["crs"]]
}
correlaciones <- sapply(names(in_vrs_df)[-1], function(year) {
cor(in_vrs_df[[year]], malmquist_in_vrs[[year]], use = "complete.obs")
})
correlaciones
mejores_25 <- list("in_vrs" =top_eficiencia(resultados_in, "vrs", 25, TRUE),
"in_crs" = top_eficiencia(resultados_in, "crs", 25, TRUE),
"out_vrs" = top_eficiencia(resultados_out, "vrs", 25, TRUE),
"out_crs" = top_eficiencia(resultados_out, "crs", 25, TRUE))
resumen <- resumen_eficiencia(mejores_25$in_vrs)
colorear_region(resumen)
View(resumen)
View(resumen[["Posiciones"]])
View(resumen[["Posiciones"]])
View(resumen[["Porcentajes"]])
