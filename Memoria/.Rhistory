library(readxl)
library(dplyr)
library(Benchmarking)
library(corrplot)
library(purrr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# Datos #
data_2014 <- consolidar_datos_por_anio(2014)
install.packages("deaR")
library(deaR)
View(data_2014)
model_vrs <- read_data(data_2014, ni=3, ni=3, dmus=3, inputs=8:10, outputs=5:7, orientation="io", rts="vrs")
model_vrs <- read_data(data_2014, ni=3, no=3, dmus=3, inputs=8:10, outputs=5:7, orientation="io", rts="vrs")
model_vrs <- read_data(data_2014, ni=3, no=3, dmus=3, inputs=8:10, outputs=5:7)
model_vrs <- make_deadata(data_2014, ni=3, no=3, dmus=3, inputs=8:10, outputs=5:7)
result_vrs <- model_basic(model, orientation="io", rts="vrs", dmu_eval = 1:183, dmu_ref = 1:183)
model <- make_deadata(data_2014, ni=3, no=3, dmus=3, inputs=8:10, outputs=5:7)
result_vrs <- model_basic(model, orientation="io", rts="vrs", dmu_eval = 1:183, dmu_ref = 1:183)
view(result_vrs)
View(result_vrs)
efficiencies(result_vrs)
valores <- efficiencies(result_vrs)
resultados_2014_in <- analisis_dea_in(data_2014)
resultados_2014_in <- analisis_dea_in(data_2014)
analisis_dea_in <- function(data) {
#data <- data_2014_2
# Preparar inputs y outputs
input_dea <- as.data.frame(data[c(8,9,10)])
output_dea <- as.data.frame(data[c(5,6,7)])
# Aplicar DEA orientado a los inputs
resultado_dea_in_vrs <- dea(X = input_dea, Y = output_dea, RTS = "vrs")
resultado_dea_in_crs <- dea(X = input_dea, Y = output_dea, RTS = "crs")
resultado_vrs <- dea(XREF = input_dea, YREF = output_dea, X = input_dea, Y = output_dea, model="input", RTS = "variable")
print(resultado_vrs)
print(resultado_dea_in_vrs$eff)
# Calcular eficiencias
eficiencia_vrs <- resultado_dea_in_vrs$eff
eficiencia_crs <- resultado_dea_in_crs$eff
# Crear dataframe con eficiencias y retorno a escala
eficiencia_df <- data.frame(
IdEstablecimiento = data$IdEstablecimiento,
Nombre = data$'Nombre Establecimiento',
Region = data$'Region',
vrs = round(eficiencia_vrs, 3),
crs = round(eficiencia_crs, 3),
escala = round(eficiencia_vrs / eficiencia_crs, 3),
latitud = data$latitud,
longitud = data$longitud,
region_id = data$region_id
)
# ------------------------------------------------------------------- #
# Ordenar dataframes según diferentes columnas
eficiencia_vrs_data <- eficiencia_df[order(-eficiencia_df$vrs), ]
eficiencia_crs_data <- eficiencia_df[order(-eficiencia_df$crs), ]
eficiencia_escala_data <- eficiencia_df[order(eficiencia_df$escala), ]
# ------------------------------------------------------------------- #
# Clasificar eficiencia VRS
clasificacion_vrs <- cut(eficiencia_vrs,
breaks = c(-Inf, 0.5, 0.75, 1, Inf),
labels = c("Menor que 0.5", "Entre 0.5 y 0.75", "Entre 0.75 y 1", "Valor 1"),
right = FALSE)
# Clasificar eficiencia CRS
clasificacion_crs <- cut(eficiencia_crs,
breaks = c(-Inf, 0.5, 0.75, 1, Inf),
labels = c("Menor que 0.5", "Entre 0.5 y 0.75", "Entre 0.75 y 1", "Valor 1"),
right = FALSE)
# Calcular frecuencia y porcentaje para VRS
frecuencia_vrs_clasificada <- table(clasificacion_vrs)
porcentaje_vrs_clasificada <- prop.table(frecuencia_vrs_clasificada) * 100
# Calcular frecuencia y porcentaje para CRS
frecuencia_crs_clasificada <- table(clasificacion_crs)
porcentaje_crs_clasificada <- prop.table(frecuencia_crs_clasificada) * 100
# Mostrar resultados
# cat("Clasificación de eficiencia en VRS:\n")
# print(frecuencia_vrs_clasificada)
# cat("----------------------------------\n")
# cat("Porcentaje de eficiencia en VRS:\n")
# print(porcentaje_vrs_clasificada)
# cat("----------------------------------\n")
# cat("----------------------------------\n")
# cat("\nClasificación de eficiencia en CRS:\n")
# print(frecuencia_crs_clasificada)
# cat("----------------------------------\n")
# cat("Porcentaje de eficiencia en CRS:\n")
# print(porcentaje_crs_clasificada)
# Retornar los dataframes ordenados como una lista
return(list(data= eficiencia_df,
vrs = eficiencia_vrs_data,
crs = eficiencia_crs_data,
esc = eficiencia_escala_data))
}
resultados_2014_in <- analisis_dea_in(data_2014)
library(readxl)
library(dplyr)
library(Benchmarking)
library(corrplot)
library(purrr)
library(deaR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# Datos #
data_2014 <- consolidar_datos_por_anio(2014)
resultados_2014_in <- analisis_dea_in(data_2014)
View(data_2014)
analisis_dea_in <- function(data) {
#data <- data_2014_2
# Preparar inputs y outputs
model <- make_deadata(data, ni=3, no=3, dmus=3, inputs=8:10, outputs=5:7)
# Aplicar DEA orientado a los inputs
resultado_dea_in_vrs <- model_basic(model, orientation="io", rts="vrs", dmu_eval = 1:183, dmu_ref = 1:183)
resultado_dea_in_crs <- model_basic(model, orientation="io", rts="crs", dmu_eval = 1:183, dmu_ref = 1:183)
# Calcular eficiencias
eficiencia_vrs <- efficiencies(resultado_dea_in_vrs)
eficiencia_crs <- efficiencies(resultado_dea_in_crs)
# Crear dataframe con eficiencias y retorno a escala
eficiencia_df <- data.frame(
IdEstablecimiento = data$IdEstablecimiento,
Nombre = data$'Nombre Establecimiento',
Region = data$'Region',
vrs = round(eficiencia_vrs, 3),
crs = round(eficiencia_crs, 3),
escala = round(eficiencia_vrs / eficiencia_crs, 3),
latitud = data$latitud,
longitud = data$longitud,
region_id = data$region_id
)
# ------------------------------------------------------------------- #
# Ordenar dataframes según diferentes columnas
eficiencia_vrs_data <- eficiencia_df[order(-eficiencia_df$vrs), ]
eficiencia_crs_data <- eficiencia_df[order(-eficiencia_df$crs), ]
eficiencia_escala_data <- eficiencia_df[order(eficiencia_df$escala), ]
# ------------------------------------------------------------------- #
# Clasificar eficiencia VRS
clasificacion_vrs <- cut(eficiencia_vrs,
breaks = c(-Inf, 0.5, 0.75, 1, Inf),
labels = c("Menor que 0.5", "Entre 0.5 y 0.75", "Entre 0.75 y 1", "Valor 1"),
right = FALSE)
# Clasificar eficiencia CRS
clasificacion_crs <- cut(eficiencia_crs,
breaks = c(-Inf, 0.5, 0.75, 1, Inf),
labels = c("Menor que 0.5", "Entre 0.5 y 0.75", "Entre 0.75 y 1", "Valor 1"),
right = FALSE)
# Calcular frecuencia y porcentaje para VRS
frecuencia_vrs_clasificada <- table(clasificacion_vrs)
porcentaje_vrs_clasificada <- prop.table(frecuencia_vrs_clasificada) * 100
# Calcular frecuencia y porcentaje para CRS
frecuencia_crs_clasificada <- table(clasificacion_crs)
porcentaje_crs_clasificada <- prop.table(frecuencia_crs_clasificada) * 100
# Mostrar resultados
# cat("Clasificación de eficiencia en VRS:\n")
# print(frecuencia_vrs_clasificada)
# cat("----------------------------------\n")
# cat("Porcentaje de eficiencia en VRS:\n")
# print(porcentaje_vrs_clasificada)
# cat("----------------------------------\n")
# cat("----------------------------------\n")
# cat("\nClasificación de eficiencia en CRS:\n")
# print(frecuencia_crs_clasificada)
# cat("----------------------------------\n")
# cat("Porcentaje de eficiencia en CRS:\n")
# print(porcentaje_crs_clasificada)
# Retornar los dataframes ordenados como una lista
return(list(data= eficiencia_df,
vrs = eficiencia_vrs_data,
crs = eficiencia_crs_data,
esc = eficiencia_escala_data))
}
resultados_2014_in <- analisis_dea_in(data_2014)
View(resultados_2014_in)
# -------------------------------------------------------- #
# Revisar correlación del año 2014
resultados_2014_in_vrs <- subset(resultados_2014_in$vrs, vrs > 0.99)
View(resultados_2014_in_vrs)
data_2014_2 <- data_2014[data_2014$IdEstablecimiento %in% resultados_2014_in_vrs$IdEstablecimiento, ]
resultados_2_2014_in <- analisis_dea_in(data_2014_2)
resultados_2014_in_vrs_2 <- resultados_2_2014_in$vrs
resultados_2_2014_in <- analisis_dea_in(data_2014_2)
resultados_2014_in_vrs_2 <- resultados_2_2014_in$vrs
analisis_dea_in <- function(data) {
#data <- data_2014_2
# Preparar inputs y outputs
model <- make_deadata(data, ni=3, no=3, dmus=3, inputs=8:10, outputs=5:7)
# Aplicar DEA orientado a los inputs
resultado_dea_in_vrs <- model_basic(model, orientation="io", rts="vrs", dmu_eval = 1:nrow(data), dmu_ref = 1:1:nrow(data))
resultado_dea_in_crs <- model_basic(model, orientation="io", rts="crs", dmu_eval = 1:nrow(data), dmu_ref = 1:nrow(data))
# Calcular eficiencias
eficiencia_vrs <- efficiencies(resultado_dea_in_vrs)
eficiencia_crs <- efficiencies(resultado_dea_in_crs)
# Crear dataframe con eficiencias y retorno a escala
eficiencia_df <- data.frame(
IdEstablecimiento = data$IdEstablecimiento,
Nombre = data$'Nombre Establecimiento',
Region = data$'Region',
vrs = round(eficiencia_vrs, 3),
crs = round(eficiencia_crs, 3),
escala = round(eficiencia_vrs / eficiencia_crs, 3),
latitud = data$latitud,
longitud = data$longitud,
region_id = data$region_id
)
# ------------------------------------------------------------------- #
# Ordenar dataframes según diferentes columnas
eficiencia_vrs_data <- eficiencia_df[order(-eficiencia_df$vrs), ]
eficiencia_crs_data <- eficiencia_df[order(-eficiencia_df$crs), ]
eficiencia_escala_data <- eficiencia_df[order(eficiencia_df$escala), ]
# ------------------------------------------------------------------- #
# Clasificar eficiencia VRS
clasificacion_vrs <- cut(eficiencia_vrs,
breaks = c(-Inf, 0.5, 0.75, 1, Inf),
labels = c("Menor que 0.5", "Entre 0.5 y 0.75", "Entre 0.75 y 1", "Valor 1"),
right = FALSE)
# Clasificar eficiencia CRS
clasificacion_crs <- cut(eficiencia_crs,
breaks = c(-Inf, 0.5, 0.75, 1, Inf),
labels = c("Menor que 0.5", "Entre 0.5 y 0.75", "Entre 0.75 y 1", "Valor 1"),
right = FALSE)
# Calcular frecuencia y porcentaje para VRS
frecuencia_vrs_clasificada <- table(clasificacion_vrs)
porcentaje_vrs_clasificada <- prop.table(frecuencia_vrs_clasificada) * 100
# Calcular frecuencia y porcentaje para CRS
frecuencia_crs_clasificada <- table(clasificacion_crs)
porcentaje_crs_clasificada <- prop.table(frecuencia_crs_clasificada) * 100
# Mostrar resultados
# cat("Clasificación de eficiencia en VRS:\n")
# print(frecuencia_vrs_clasificada)
# cat("----------------------------------\n")
# cat("Porcentaje de eficiencia en VRS:\n")
# print(porcentaje_vrs_clasificada)
# cat("----------------------------------\n")
# cat("----------------------------------\n")
# cat("\nClasificación de eficiencia en CRS:\n")
# print(frecuencia_crs_clasificada)
# cat("----------------------------------\n")
# cat("Porcentaje de eficiencia en CRS:\n")
# print(porcentaje_crs_clasificada)
# Retornar los dataframes ordenados como una lista
return(list(data= eficiencia_df,
vrs = eficiencia_vrs_data,
crs = eficiencia_crs_data,
esc = eficiencia_escala_data))
}
resultados_2_2014_in <- analisis_dea_in(data_2014_2)
resultados_2014_in_vrs_2 <- resultados_2_2014_in$vrs
View(resultados_2_2014_in)
View(resultados_2014_in)
vrs_2014_1 <- resultados_2014_in$vrs
vrs_2014_2 <- resultados_2_2014_in$vrs
View(vrs_2014_1)
View(vrs_2014_2)
View(data_2014_2)
analisis_dea_in <- function(data) {
#data <- data_2014_2
# Preparar inputs y outputs
model <- make_deadata(data, ni=3, no=3, dmus=3, inputs=8:10, outputs=5:7)
# Aplicar DEA orientado a los inputs
resultado_dea_in_vrs <- model_basic(model, orientation="io", rts="vrs", dmu_eval = 1:nrow(data), dmu_ref = 1:nrow(data))
resultado_dea_in_crs <- model_basic(model, orientation="io", rts="crs", dmu_eval = 1:nrow(data), dmu_ref = 1:nrow(data))
# Calcular eficiencias
eficiencia_vrs <- efficiencies(resultado_dea_in_vrs)
eficiencia_crs <- efficiencies(resultado_dea_in_crs)
# Crear dataframe con eficiencias y retorno a escala
eficiencia_df <- data.frame(
IdEstablecimiento = data$IdEstablecimiento,
Nombre = data$'Nombre Establecimiento',
Region = data$'Region',
vrs = round(eficiencia_vrs, 3),
crs = round(eficiencia_crs, 3),
escala = round(eficiencia_vrs / eficiencia_crs, 3),
latitud = data$latitud,
longitud = data$longitud,
region_id = data$region_id
)
# ------------------------------------------------------------------- #
# Ordenar dataframes según diferentes columnas
eficiencia_vrs_data <- eficiencia_df[order(-eficiencia_df$vrs), ]
eficiencia_crs_data <- eficiencia_df[order(-eficiencia_df$crs), ]
eficiencia_escala_data <- eficiencia_df[order(eficiencia_df$escala), ]
# ------------------------------------------------------------------- #
# Clasificar eficiencia VRS
clasificacion_vrs <- cut(eficiencia_vrs,
breaks = c(-Inf, 0.5, 0.75, 1, Inf),
labels = c("Menor que 0.5", "Entre 0.5 y 0.75", "Entre 0.75 y 1", "Valor 1"),
right = FALSE)
# Clasificar eficiencia CRS
clasificacion_crs <- cut(eficiencia_crs,
breaks = c(-Inf, 0.5, 0.75, 1, Inf),
labels = c("Menor que 0.5", "Entre 0.5 y 0.75", "Entre 0.75 y 1", "Valor 1"),
right = FALSE)
# Calcular frecuencia y porcentaje para VRS
frecuencia_vrs_clasificada <- table(clasificacion_vrs)
porcentaje_vrs_clasificada <- prop.table(frecuencia_vrs_clasificada) * 100
# Calcular frecuencia y porcentaje para CRS
frecuencia_crs_clasificada <- table(clasificacion_crs)
porcentaje_crs_clasificada <- prop.table(frecuencia_crs_clasificada) * 100
# Mostrar resultados
# cat("Clasificación de eficiencia en VRS:\n")
# print(frecuencia_vrs_clasificada)
# cat("----------------------------------\n")
# cat("Porcentaje de eficiencia en VRS:\n")
# print(porcentaje_vrs_clasificada)
# cat("----------------------------------\n")
# cat("----------------------------------\n")
# cat("\nClasificación de eficiencia en CRS:\n")
# print(frecuencia_crs_clasificada)
# cat("----------------------------------\n")
# cat("Porcentaje de eficiencia en CRS:\n")
# print(porcentaje_crs_clasificada)
# Retornar los dataframes ordenados como una lista
return(list(data= eficiencia_df,
vrs = eficiencia_vrs_data,
crs = eficiencia_crs_data,
esc = eficiencia_escala_data))
}
resultados_2014_in <- analisis_dea_in(data_2014)
# -------------------------------------------------------- #
# Revisar correlación del año 2014
resultados_2014_in_vrs <- subset(resultados_2014_in$vrs, vrs > 0.99)
data_2014_2 <- data_2014[data_2014$IdEstablecimiento %in% resultados_2014_in_vrs$IdEstablecimiento, ]
resultados_2_2014_in <- analisis_dea_in(data_2014_2)
resultados_2014_in_vrs_2 <- resultados_2_2014_in$vrs
vrs_2014_1 <- resultados_2014_in$vrs
vrs_2014_2 <- resultados_2_2014_in$vrs
View(vrs_2014_1)
# -------------------------------------------------------- #
# Revisar correlación del año 2014
resultados_2014_in_vrs <- subset(resultados_2014_in$vrs, vrs < 0.5)
View(resultados_2014_in_vrs)
# -------------------------------------------------------- #
# Revisar correlación del año 2014
resultados_2014_in_vrs <- subset(resultados_2014_in$vrs, vrs < 0.3)
data_2014_2 <- data_2014[data_2014$IdEstablecimiento %in% resultados_2014_in_vrs$IdEstablecimiento, ]
resultados_2_2014_in <- analisis_dea_in(data_2014_2)
resultados_2014_in_vrs_2 <- resultados_2_2014_in$vrs
vrs_2014_1 <- resultados_2014_in$vrs
vrs_2014_2 <- resultados_2_2014_in$vrs
sensibilidad_parametro <- function(data, data_original,mayor,valor) {
# -------------------------------------------------------- #
# Revisar correlación del año 2014
if (mayor){
data_filtrada <- subset(data_original$vrs, vrs > valor)
}else{
data_filtrada <- subset(data_original$vrs, vrs < valor)
}
data_set <- data[data$IdEstablecimiento %in% data_filtrada$IdEstablecimiento, ]
resultados_in  <- analisis_dea_in(data_set)
vrs_1 <- data_filtrada
vrs_2 <- resultados_in$vrs
# Combinar los dataframes por IdEstablecimiento, manteniendo solo las columnas vrs
resultados_combinados <- merge(
vrs_1[, c("IdEstablecimiento", "vrs")],
vrs_2[, c("IdEstablecimiento", "vrs")],
by = "IdEstablecimiento",
suffixes = c("_1", "_2")
)
# Mostrar el dataframe combinado con solo las columnas vrs
print(resultados_combinados)
# Calcular la correlación entre las dos columnas vrs
correlacion <- cor(resultados_combinados$vrs_1, resultados_combinados$vrs_2, use = "pairwise.complete.obs")
# Mostrar el resultado de la correlación
print(correlacion)
}
sensibilidad_parametro(data_2014, resultados_2014_in, FALSE, 0.3)
sensibilidad_parametro <- function(data, data_original,mayor,valor) {
# -------------------------------------------------------- #
# Revisar correlación del año 2014
if (mayor){
data_filtrada <- subset(data_original$vrs, vrs > valor)
}else{
data_filtrada <- subset(data_original$vrs, vrs < valor)
}
data_set <- data[data$IdEstablecimiento %in% data_filtrada$IdEstablecimiento, ]
resultados_in  <- analisis_dea_in(data_set)
vrs_1 <- data_filtrada
vrs_2 <- resultados_in$vrs
# Combinar los dataframes por IdEstablecimiento, manteniendo solo las columnas vrs
resultados_combinados <- merge(
vrs_1[, c("IdEstablecimiento", "vrs")],
vrs_2[, c("IdEstablecimiento", "vrs")],
by = "IdEstablecimiento",
suffixes = c("_1", "_2")
)
# Mostrar el dataframe combinado con solo las columnas vrs
print(resultados_combinados)
# Calcular la correlación entre las dos columnas vrs
correlacion <- cor(resultados_combinados$vrs_1, resultados_combinados$vrs_2, use = "pairwise.complete.obs")
# Mostrar el resultado de la correlación
print(correlacion)
# Calcular los rankings
resultados_combinados$ranking_vrs_1 <- rank(-df$vrs_1)  # El '-' invierte para que sea de mayor a menor
resultados_combinados$ranking_vrs_2 <- rank(-df$vrs_2)
# Verificar si los rankings coinciden
resultados_combinados$ranking_coincide <- df$ranking_vrs_1 == df$ranking_vrs_2
# Mostrar el resultado
print(resultados_combinados)
}
sensibilidad_parametro(data_2014, resultados_2014_in, FALSE, 0.3)
sensibilidad_parametro <- function(data, data_original,mayor,valor) {
# -------------------------------------------------------- #
# Revisar correlación del año 2014
if (mayor){
data_filtrada <- subset(data_original$vrs, vrs > valor)
}else{
data_filtrada <- subset(data_original$vrs, vrs < valor)
}
data_set <- data[data$IdEstablecimiento %in% data_filtrada$IdEstablecimiento, ]
resultados_in  <- analisis_dea_in(data_set)
vrs_1 <- data_filtrada
vrs_2 <- resultados_in$vrs
# Combinar los dataframes por IdEstablecimiento, manteniendo solo las columnas vrs
resultados_combinados <- merge(
vrs_1[, c("IdEstablecimiento", "vrs")],
vrs_2[, c("IdEstablecimiento", "vrs")],
by = "IdEstablecimiento",
suffixes = c("_1", "_2")
)
# Mostrar el dataframe combinado con solo las columnas vrs
print(resultados_combinados)
# Calcular la correlación entre las dos columnas vrs
correlacion <- cor(resultados_combinados$vrs_1, resultados_combinados$vrs_2, use = "pairwise.complete.obs")
# Mostrar el resultado de la correlación
print(correlacion)
# Calcular los rankings
resultados_combinados$ranking_vrs_1 <- rank(-resultados_combinados$vrs_1)  # El '-' invierte para que sea de mayor a menor
resultados_combinados$ranking_vrs_2 <- rank(-resultados_combinados$vrs_2)
# Verificar si los rankings coinciden
resultados_combinados$ranking_coincide <- resultados_combinados$ranking_vrs_1 == resultados_combinados$ranking_vrs_2
# Mostrar el resultado
print(resultados_combinados)
}
sensibilidad_parametro(data_2014, resultados_2014_in, FALSE, 0.3)
sensibilidad_parametro(data_2014, resultados_2014_in, TRUE, 0.75)
sensibilidad_parametro(data_2014, resultados_2014_in, FALSE, 0.99)
