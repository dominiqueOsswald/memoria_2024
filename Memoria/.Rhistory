library(readxl)
library(readxl)
library(openxlsx)
library(dplyr)
library(deaR)
install.packages("readxl")
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ==============================================
#  PROCESAMIENTO DE DATOS
# ==============================================
#  CONSOLIDADO DE DATOS POR AÑO
anios <- 2014:2023
anios_pre_pandemia <- c("2014", "2015", "2016", "2017", "2018", "2019")
anios_pandemia <- c("2020", "2021", "2022", "2023")
load("dataR/datos.RData")
load("dataR/resultados_eficiencia.RData")
load("dataR/resultados_eficiencia_atipicos.RData")
load("dataR/malmquist.RData")
load("dataR/determinantes.RData")
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
debug(calcular_malmquist)
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
TIME
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
efficiency_df
TIME
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
efficiency_df
# ==============================================
#  CÁLCULO DE INDICE MALMQUIST
# ==============================================
calcular_malmquist <- function(datos, tipo, orientacion) {
# Extraer inputs, outputs, ID y TIME
input_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 8:10])))
output_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 5:7])))
ID <- unlist(lapply(datos, function(data) data$IdEstablecimiento))
TIME <- unlist(lapply(names(datos), function(year) rep(year, nrow(datos[[year]]))))
# Eliminar duplicados
unique_indices <- !duplicated(data.frame(ID = ID, TIME = TIME))
input_data <- input_data[unique_indices, ]
output_data <- output_data[unique_indices, ]
ID <- ID[unique_indices]
TIME <- TIME[unique_indices]
# Calcular el índice Malmquist
malmquist_index <- Benchmarking::malmquist(X = input_data, Y = output_data, ID = ID, TIME = TIME,
RTS = tipo, ORIENTATION = orientacion)
# Crear dataframe de resultados
resultados_df <- data.frame(
ID = malmquist_index$id,
Año = malmquist_index$time,
MalmquistIndex = malmquist_index$m,
Effch = malmquist_index$ec,
Techch = malmquist_index$tc
)
# Crear dataframes pivotados
pivotar_resultados <- function(data, column) {
data %>%
select(ID, Año, !!sym(column)) %>%
pivot_wider(names_from = Año, values_from = !!sym(column)) %>%
Filter(function(x) !all(is.na(x)), .)
}
malmquist_df <- pivotar_resultados(resultados_df, "MalmquistIndex")
effch_df <- pivotar_resultados(resultados_df, "Effch")
techch_df <- pivotar_resultados(resultados_df, "Techch")
# Crear eficiencia en formato wide
efficiency_df <- data.frame(
ID = malmquist_index$id,
TIME = malmquist_index$time,
Efficiency = malmquist_index$e11
) %>%
arrange(ID, TIME) %>%
pivot_wider(names_from = TIME, values_from = Efficiency)
print(5)
# Se elimina la columna que no tienen ningun valor
malmquist_df <- Filter(function(x) !all(is.na(x)),malmquist_df)
effch_df <- Filter(function(x) !all(is.na(x)),effch_df)
techch_df <- Filter(function(x) !all(is.na(x)), techch_df)
# Ordenar el dataframe por ID y TIME
efficiency_df <- efficiency_df[order(efficiency_df$ID), ]
# Transformar el dataframe en formato ancho (wide) con 'ID' como fila y 'TIME' como columnas
efficiency_wide <- pivot_wider(efficiency_df, names_from = TIME, values_from = Efficiency)
malmquist_df <- procesar_index(malmquist_df)
return(list(eficiencia = efficiency_wide,
index = malmquist_df,
tech = techch_df,
eff = effch_df))
}
clear
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
undebug(calcular_malmquist)
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
# ==============================================
#  CÁLCULO DE INDICE MALMQUIST
# ==============================================
calcular_malmquist <- function(datos, tipo, orientacion) {
# Extraer inputs, outputs, ID y TIME
input_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 8:10])))
output_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 5:7])))
ID <- unlist(lapply(datos, function(data) data$IdEstablecimiento))
TIME <- unlist(lapply(names(datos), function(year) rep(year, nrow(datos[[year]]))))
# Eliminar duplicados
unique_indices <- !duplicated(data.frame(ID = ID, TIME = TIME))
input_data <- input_data[unique_indices, ]
output_data <- output_data[unique_indices, ]
ID <- ID[unique_indices]
TIME <- TIME[unique_indices]
# Calcular el índice Malmquist
malmquist_index <- Benchmarking::malmquist(X = input_data, Y = output_data, ID = ID, TIME = TIME,
RTS = tipo, ORIENTATION = orientacion)
# Crear dataframe de resultados
resultados_df <- data.frame(
ID = malmquist_index$id,
Año = malmquist_index$time,
MalmquistIndex = malmquist_index$m,
Effch = malmquist_index$ec,
Techch = malmquist_index$tc
)
# Crear dataframes pivotados
pivotar_resultados <- function(data, column) {
data %>%
select(ID, Año, !!sym(column)) %>%
pivot_wider(names_from = Año, values_from = !!sym(column)) %>%
Filter(function(x) !all(is.na(x)), .)
}
malmquist_df <- pivotar_resultados(resultados_df, "MalmquistIndex")
effch_df <- pivotar_resultados(resultados_df, "Effch")
techch_df <- pivotar_resultados(resultados_df, "Techch")
# Crear eficiencia en formato wide
efficiency_df <- data.frame(
ID = malmquist_index$id,
TIME = malmquist_index$time,
Efficiency = malmquist_index$e11
) %>%
arrange(ID, TIME) %>%
pivot_wider(names_from = TIME, values_from = Efficiency)
print(5)
# Se elimina la columna que no tienen ningun valor
malmquist_df <- Filter(function(x) !all(is.na(x)),malmquist_df)
effch_df <- Filter(function(x) !all(is.na(x)),effch_df)
techch_df <- Filter(function(x) !all(is.na(x)), techch_df)
# Ordenar el dataframe por ID y TIME
efficiency_df <- efficiency_df[order(efficiency_df$ID), ]
# Transformar el dataframe en formato ancho (wide) con 'ID' como fila y 'TIME' como columnas
efficiency_wide <- pivot_wider(efficiency_df, names_from = TIME, values_from = Efficiency)
malmquist_df <- procesar_index(malmquist_df)
return(list(eficiencia = efficiency_wide,
index = malmquist_df,
tech = techch_df,
eff = effch_df))
}
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
# ==============================================
#  CÁLCULO DE INDICE MALMQUIST
# ==============================================
calcular_malmquist <- function(datos, tipo, orientacion) {
# Extraer inputs, outputs, ID y TIME
input_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 8:10])))
output_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 5:7])))
ID <- unlist(lapply(datos, function(data) data$IdEstablecimiento))
TIME <- unlist(lapply(names(datos), function(year) rep(year, nrow(datos[[year]]))))
# Eliminar duplicados
unique_indices <- !duplicated(data.frame(ID = ID, TIME = TIME))
input_data <- input_data[unique_indices, ]
output_data <- output_data[unique_indices, ]
ID <- ID[unique_indices]
TIME <- TIME[unique_indices]
# Calcular el índice Malmquist
malmquist_index <- Benchmarking::malmquist(X = input_data, Y = output_data, ID = ID, TIME = TIME,
RTS = tipo, ORIENTATION = orientacion)
# Crear dataframe de resultados
resultados_df <- data.frame(
ID = malmquist_index$id,
Año = malmquist_index$time,
MalmquistIndex = malmquist_index$m,
Effch = malmquist_index$ec,
Techch = malmquist_index$tc
)
# Crear dataframes pivotados
pivotar_resultados <- function(data, column) {
data %>%
select(ID, Año, !!sym(column)) %>%
pivot_wider(names_from = Año, values_from = !!sym(column)) %>%
Filter(function(x) !all(is.na(x)), .)
}
malmquist_df <- pivotar_resultados(resultados_df, "MalmquistIndex")
effch_df <- pivotar_resultados(resultados_df, "Effch")
techch_df <- pivotar_resultados(resultados_df, "Techch")
# Crear eficiencia en formato wide
efficiency_df <- data.frame(
ID = malmquist_index$id,
TIME = malmquist_index$time,
Efficiency = malmquist_index$e11
) %>%
arrange(ID, TIME) %>%
pivot_wider(names_from = TIME, values_from = Efficiency)
print(5)
# Se elimina la columna que no tienen ningun valor
malmquist_df <- Filter(function(x) !all(is.na(x)),malmquist_df)
effch_df <- Filter(function(x) !all(is.na(x)),effch_df)
techch_df <- Filter(function(x) !all(is.na(x)), techch_df)
# Ordenar el dataframe por ID y TIME
efficiency_df <- efficiency_df[order(efficiency_df$ID, efficiency_df$TIME), ]
# Transformar el dataframe en formato ancho (wide) con 'ID' como fila y 'TIME' como columnas
efficiency_wide <- pivot_wider(efficiency_df, names_from = TIME, values_from = Efficiency)
malmquist_df <- procesar_index(malmquist_df)
return(list(eficiencia = efficiency_wide,
index = malmquist_df,
tech = techch_df,
eff = effch_df))
}
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
# ==============================================
#  CÁLCULO DE INDICE MALMQUIST
# ==============================================
calcular_malmquist <- function(datos, tipo, orientacion) {
# Extraer inputs, outputs, ID y TIME
input_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 8:10])))
output_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 5:7])))
ID <- unlist(lapply(datos, function(data) data$IdEstablecimiento))
TIME <- unlist(lapply(names(datos), function(year) rep(year, nrow(datos[[year]]))))
# Eliminar duplicados
unique_indices <- !duplicated(data.frame(ID = ID, TIME = TIME))
input_data <- input_data[unique_indices, ]
output_data <- output_data[unique_indices, ]
ID <- ID[unique_indices]
TIME <- TIME[unique_indices]
# Calcular el índice Malmquist
malmquist_index <- Benchmarking::malmquist(X = input_data, Y = output_data, ID = ID, TIME = TIME,
RTS = tipo, ORIENTATION = orientacion)
# Crear dataframe de resultados
resultados_df <- data.frame(
ID = malmquist_index$id,
Año = malmquist_index$time,
MalmquistIndex = malmquist_index$m,
Effch = malmquist_index$ec,
Techch = malmquist_index$tc
)
# Crear dataframes pivotados
pivotar_resultados <- function(data, column) {
data %>%
select(ID, Año, !!sym(column)) %>%
pivot_wider(names_from = Año, values_from = !!sym(column)) %>%
Filter(function(x) !all(is.na(x)), .)
}
malmquist_df <- pivotar_resultados(resultados_df, "MalmquistIndex")
effch_df <- pivotar_resultados(resultados_df, "Effch")
techch_df <- pivotar_resultados(resultados_df, "Techch")
# Crear eficiencia en formato wide
efficiency_df <- data.frame(
ID = malmquist_index$id,
TIME = malmquist_index$time,
Efficiency = malmquist_index$e11
) %>%
arrange(ID, TIME) %>%
pivot_wider(names_from = TIME, values_from = Efficiency)
print(5)
# Se elimina la columna que no tienen ningun valor
malmquist_df <- Filter(function(x) !all(is.na(x)),malmquist_df)
effch_df <- Filter(function(x) !all(is.na(x)),effch_df)
techch_df <- Filter(function(x) !all(is.na(x)), techch_df)
# Ordenar el dataframe por ID y TIME
#efficiency_df <- efficiency_df[order(efficiency_df$ID, efficiency_df$TIME), ]
# Transformar el dataframe en formato ancho (wide) con 'ID' como fila y 'TIME' como columnas
efficiency_wide <- pivot_wider(efficiency_df, names_from = TIME, values_from = Efficiency)
malmquist_df <- procesar_index(malmquist_df)
return(list(eficiencia = efficiency_wide,
index = malmquist_df,
tech = techch_df,
eff = effch_df))
}
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
# ==============================================
#  CÁLCULO DE INDICE MALMQUIST
# ==============================================
calcular_malmquist <- function(datos, tipo, orientacion) {
# Extraer inputs, outputs, ID y TIME
input_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 8:10])))
output_data <- do.call(rbind, lapply(names(datos), function(year) as.matrix(datos[[year]][, 5:7])))
ID <- unlist(lapply(datos, function(data) data$IdEstablecimiento))
TIME <- unlist(lapply(names(datos), function(year) rep(year, nrow(datos[[year]]))))
# Eliminar duplicados
unique_indices <- !duplicated(data.frame(ID = ID, TIME = TIME))
input_data <- input_data[unique_indices, ]
output_data <- output_data[unique_indices, ]
ID <- ID[unique_indices]
TIME <- TIME[unique_indices]
# Calcular el índice Malmquist
malmquist_index <- Benchmarking::malmquist(X = input_data, Y = output_data, ID = ID, TIME = TIME,
RTS = tipo, ORIENTATION = orientacion)
# Crear dataframe de resultados
resultados_df <- data.frame(
ID = malmquist_index$id,
Año = malmquist_index$time,
MalmquistIndex = malmquist_index$m,
Effch = malmquist_index$ec,
Techch = malmquist_index$tc
)
# Crear dataframes pivotados
pivotar_resultados <- function(data, column) {
data %>%
select(ID, Año, !!sym(column)) %>%
pivot_wider(names_from = Año, values_from = !!sym(column)) %>%
Filter(function(x) !all(is.na(x)), .)
}
malmquist_df <- pivotar_resultados(resultados_df, "MalmquistIndex")
effch_df <- pivotar_resultados(resultados_df, "Effch")
techch_df <- pivotar_resultados(resultados_df, "Techch")
# Crear eficiencia en formato wide
efficiency_df <- data.frame(
ID = malmquist_index$id,
TIME = malmquist_index$time,
Efficiency = malmquist_index$e11
) %>%
arrange(ID, TIME) %>%
pivot_wider(names_from = TIME, values_from = Efficiency)
print(5)
# Se elimina la columna que no tienen ningun valor
malmquist_df <- Filter(function(x) !all(is.na(x)),malmquist_df)
effch_df <- Filter(function(x) !all(is.na(x)),effch_df)
techch_df <- Filter(function(x) !all(is.na(x)), techch_df)
# Ordenar el dataframe por ID y TIME
#efficiency_df <- efficiency_df[order(efficiency_df$ID, efficiency_df$TIME), ]
# Transformar el dataframe en formato ancho (wide) con 'ID' como fila y 'TIME' como columnas
#efficiency_wide <- pivot_wider(efficiency_df, names_from = TIME, values_from = Efficiency)
malmquist_df <- procesar_index(malmquist_df)
return(list(eficiencia = efficiency_df,
index = malmquist_df,
tech = techch_df,
eff = effch_df))
}
malmquist_indices <- list(
in_vrs = malmquist("vrs", "in"),
in_crs = malmquist("crs", "in"),
out_vrs = malmquist("vrs", "out"),
out_crs = malmquist("crs", "out")
)
View(malmquist_index)
View(malmquist_indices)
View(malmquist_index)
View(malmquist_index)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ==============================================
#  PROCESAMIENTO DE DATOS
# ==============================================
#  CONSOLIDADO DE DATOS POR AÑO
anios <- 2014:2023
anios_pre_pandemia <- c("2014", "2015", "2016", "2017", "2018", "2019")
anios_pandemia <- c("2020", "2021", "2022", "2023")
load("dataR/datos.RData")
load("dataR/resultados_eficiencia.RData")
load("dataR/resultados_eficiencia_atipicos.RData")
load("dataR/malmquist.RData")
load("dataR/determinantes.RData")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ==============================================
#  PROCESAMIENTO DE DATOS
# ==============================================
#  CONSOLIDADO DE DATOS POR AÑO
anios <- 2014:2023
anios_pre_pandemia <- c("2014", "2015", "2016", "2017", "2018", "2019")
anios_pandemia <- c("2020", "2021", "2022", "2023")
load("dataR/datos.RData")
load("dataR/resultados_eficiencia.RData")
load("dataR/resultados_eficiencia_atipicos.RData")
load("dataR/malmquist.RData")
load("dataR/determinantes.RData")
