# Mostrar el gráfico
print(grafico)
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista))
}
resultados <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in, anios)
calcular_y_graficar_correlaciones <- function(lista_resultados_combinados_in, anios) {
# Instalar y cargar las librerías necesarias
if (!require(corrplot)) install.packages("corrplot")
library(corrplot)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(reshape2)) install.packages("reshape2")
library(ggplot2)
library(reshape2)
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Definir la cuadrícula de gráficos para las matrices de correlación
num_graficos <- length(correlaciones_lista)
filas <- ceiling(sqrt(num_graficos))
columnas <- ceiling(num_graficos / filas)
# Ajustar la ventana gráfica y graficar las matrices de correlación
par(mfrow = c(filas, columnas), mar = c(1, 1, 1, 3))
for (anio in names(correlaciones_lista)) {
corrplot(correlaciones_lista[[anio]], method = "color", title = paste("Matriz de Correlación - Año", anio))
}
# Restablecer la configuración gráfica por defecto
par(mfrow = c(1, 1))
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Calcular la correlación entre todas las combinaciones de años y almacenar en una matriz 6x6
correlacion_matriz <- matrix(NA, nrow = length(anios), ncol = length(anios), dimnames = list(anios, anios))
for (i in 1:length(anios)) {
for (j in 1:length(anios)) {
matriz_i <- as.vector(correlaciones_lista[[anios[i]]])
matriz_j <- as.vector(correlaciones_lista[[anios[j]]])
correlacion_matriz[i, j] <- cor(matriz_i, matriz_j, use = "complete.obs")
}
}
# Convertir la matriz a formato largo para ggplot2
correlacion_df <- melt(correlacion_matriz, varnames = c("Año1", "Año2"), value.name = "Correlacion")
# Crear el gráfico de calor
grafico <- ggplot(correlacion_df, aes(x = Año1, y = Año2, fill = Correlacion)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0) +
labs(title = "Correlación entre matrices de correlación de distintos años", x = "Año", y = "Año") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Mostrar el gráfico
print(grafico)
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista))
}
resultados <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in, anios)
calcular_y_graficar_correlaciones <- function(lista_resultados_combinados_in, anios) {
# Instalar y cargar las librerías necesarias
if (!require(corrplot)) install.packages("corrplot")
library(corrplot)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(reshape2)) install.packages("reshape2")
library(ggplot2)
library(reshape2)
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Definir la cuadrícula de gráficos para las matrices de correlación
num_graficos <- length(correlaciones_lista)
filas <- ceiling(sqrt(num_graficos))
columnas <- ceiling(num_graficos / filas)
# Ajustar la ventana gráfica y graficar las matrices de correlación
par(mfrow = c(filas, columnas), mar = c(1, 1, 1, 3))
for (anio in names(correlaciones_lista)) {
corrplot(correlaciones_lista[[anio]], method = "color", title = paste("Matriz de Correlación - Año", anio))
}
# Restablecer la configuración gráfica por defecto
par(mfrow = c(1, 1))
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Calcular la correlación entre todas las combinaciones de años y almacenar en una matriz 6x6
correlacion_matriz <- matrix(NA, nrow = length(anios), ncol = length(anios), dimnames = list(anios, anios))
for (i in 1:length(anios)) {
for (j in 1:length(anios)) {
matriz_i <- as.vector(correlaciones_lista[[anios[i]]])
matriz_j <- as.vector(correlaciones_lista[[anios[j]]])
correlacion_matriz[i, j] <- cor(matriz_i, matriz_j, use = "complete.obs")
}
}
# Convertir la matriz a formato largo para ggplot2
correlacion_df <- melt(correlacion_matriz, varnames = c("Año1", "Año2"), value.name = "Correlacion")
# Crear el gráfico de calor
grafico <- ggplot(correlacion_df, aes(x = Año1, y = Año2, fill = Correlacion)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0) +
labs(title = "Correlación entre matrices de correlación de distintos años", x = "Año", y = "Año") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Mostrar el gráfico
print(grafico)
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista))
}
resultados <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in, anios)
View(datos)
View(resultados_in)
View(resultados_in[["2014"]][["data"]])
datos_cut <- datos
for (anio in datos_cut){
# 109102 -> Instituto Psiquiátrico Dr José Horwitz Barak
# 113170 -> Hospital Psiquiátrico El Peral (Santiago, Puente Alto)
anio %>% filter(!(IdEstablecimiento %in% c(113170)))
}
# DEA - INPUT
resultados_in_cut <- aplicar_analisis_dea(datos, "io")
# SENSIBILIDAD - VRS
resultados_in_2_vrs_cut <- aplicar_sensibilidad(datos, lapply(resultados_in_cut, `[[`, "data"), 0.99, "io", "vrs", FALSE)
resultados_in_3_vrs_cut <- aplicar_sensibilidad(datos, lapply(resultados_in_2_vrs_cut, `[[`, "data"), 0.99, "io", "vrs", FALSE)
# SENSIBILIDAD - CRS
resultados_in_2_crs_cut <- aplicar_sensibilidad(datos, lapply(resultados_in_cut, `[[`, "data"), 0.99, "io", "crs", FALSE)
resultados_in_3_crs_cut <- aplicar_sensibilidad(datos, lapply(resultados_in_2_crs_cut, `[[`, "data"), 0.99, "io", "crs", FALSE)
# Llamar a la función
lista_resultados_combinados_in_cut <- combinar_resultados_iteraciones(resultados_in_cut, resultados_in_2_vrs_cut, resultados_in_3_vrs_cut, resultados_in_2_crs_cut, resultados_in_3_crs_cut)
resultados_cut <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in_cut, anios)
resultados <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in, anios)
resultados_cut <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in_cut, anios)
View(resultados_in_cut)
View(resultados_in_cut[["2014"]][["data"]])
for (anio in datos_cut){
# 109102 -> Instituto Psiquiátrico Dr José Horwitz Barak
# 113170 -> Hospital Psiquiátrico El Peral (Santiago, Puente Alto)
print(anio)
anio %>% filter(!(IdEstablecimiento %in% c(113170)))
}
for (anio in names(datos_cut)){
# 109102 -> Instituto Psiquiátrico Dr José Horwitz Barak
# 113170 -> Hospital Psiquiátrico El Peral (Santiago, Puente Alto)
print(anio)
datos_cut[[anio]] <- datos_cut[[anio]] %>% filter(!(IdEstablecimiento %in% c(113170)))
}
# DEA - INPUT
resultados_in_cut <- aplicar_analisis_dea(datos, "io")
# SENSIBILIDAD - VRS
resultados_in_2_vrs_cut <- aplicar_sensibilidad(datos, lapply(resultados_in_cut, `[[`, "data"), 0.99, "io", "vrs", FALSE)
resultados_in_3_vrs_cut <- aplicar_sensibilidad(datos, lapply(resultados_in_2_vrs_cut, `[[`, "data"), 0.99, "io", "vrs", FALSE)
# SENSIBILIDAD - CRS
resultados_in_2_crs_cut <- aplicar_sensibilidad(datos, lapply(resultados_in_cut, `[[`, "data"), 0.99, "io", "crs", FALSE)
resultados_in_3_crs_cut <- aplicar_sensibilidad(datos, lapply(resultados_in_2_crs_cut, `[[`, "data"), 0.99, "io", "crs", FALSE)
# Llamar a la función
lista_resultados_combinados_in_cut <- combinar_resultados_iteraciones(resultados_in_cut, resultados_in_2_vrs_cut, resultados_in_3_vrs_cut, resultados_in_2_crs_cut, resultados_in_3_crs_cut)
resultados_cut <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in_cut, anios)
View(resultados_in_cut)
View(resultados_in_cut[["2014"]][["data"]])
eliminar <-  c(113170)
for (anio in names(datos_cut)){
# 109102 -> Instituto Psiquiátrico Dr José Horwitz Barak
# 113170 -> Hospital Psiquiátrico El Peral (Santiago, Puente Alto)
print(datos_cut[[anio]])
datos_cut[[anio]] <- datos_cut[[anio]] %>% filter(!(IdEstablecimiento %in% eliminar))
}
for (anio in names(datos_cut)){
# 109102 -> Instituto Psiquiátrico Dr José Horwitz Barak
# 113170 -> Hospital Psiquiátrico El Peral (Santiago, Puente Alto)
print(datos_cut[[anio]] %>% filter(!(IdEstablecimiento %in% eliminar)))
datos_cut[[anio]] <- datos_cut[[anio]] %>% filter(!(IdEstablecimiento %in% eliminar))
}
for (anio in names(datos_cut)){
# 109102 -> Instituto Psiquiátrico Dr José Horwitz Barak
# 113170 -> Hospital Psiquiátrico El Peral (Santiago, Puente Alto)
print(datos_cut[[anio]] %>% filter((IdEstablecimiento %in% eliminar)))
datos_cut[[anio]] <- datos_cut[[anio]] %>% filter(!(IdEstablecimiento %in% eliminar))
}
eliminar <-  c("113170")
for (anio in names(datos_cut)){
# 109102 -> Instituto Psiquiátrico Dr José Horwitz Barak
# 113170 -> Hospital Psiquiátrico El Peral (Santiago, Puente Alto)
print(datos_cut[[anio]] %>% filter((IdEstablecimiento %in% eliminar)))
datos_cut[[anio]] <- datos_cut[[anio]] %>% filter(!(IdEstablecimiento %in% eliminar))
}
View(datos)
datos_cut <- datos
eliminar <- c(113170)
# Iterar sobre cada año en la lista
for (anio in names(datos_cut)) {
# Filtrar los datos eliminando la fila con IdEstablecimiento 113170
datos_cut[[anio]] <- datos_cut[[anio]] %>%
filter(!(IdEstablecimiento %in% eliminar))
}
# DEA - INPUT
resultados_in_cut <- aplicar_analisis_dea(datos, "io")
# DEA - INPUT
resultados_in_cut <- aplicar_analisis_dea(datos_cut, "io")
# SENSIBILIDAD - VRS
resultados_in_2_vrs_cut <- aplicar_sensibilidad(datos_cut, lapply(resultados_in_cut, `[[`, "data"), 0.99, "io", "vrs", FALSE)
resultados_in_3_vrs_cut <- aplicar_sensibilidad(datos_cut, lapply(resultados_in_2_vrs_cut, `[[`, "data"), 0.99, "io", "vrs", FALSE)
# SENSIBILIDAD - CRS
resultados_in_2_crs_cut <- aplicar_sensibilidad(datos_cut, lapply(resultados_in_cut, `[[`, "data"), 0.99, "io", "crs", FALSE)
resultados_in_3_crs_cut <- aplicar_sensibilidad(datos_cut, lapply(resultados_in_2_crs_cut, `[[`, "data"), 0.99, "io", "crs", FALSE)
# Llamar a la función
lista_resultados_combinados_in_cut <- combinar_resultados_iteraciones(resultados_in_cut, resultados_in_2_vrs_cut, resultados_in_3_vrs_cut, resultados_in_2_crs_cut, resultados_in_3_crs_cut)
resultados_cut <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in_cut, anios)
View(resultados_in_cut)
View(resultados_in_cut[["2014"]][["data"]])
View(resultados_in_2_vrs)
View(resultados_in_2_vrs[["2014"]][["data"]])
# DEA - INPUT
resultados_in <- list(
original =  aplicar_analisis_dea(datos, "io"),
iteracion_1 = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_2 = aplicar_sensibilidad(datos, lapply(iteracion_1, `[[`, "data"), 0.99, "io", "vrs", FALSE)
)
# DEA - INPUT
resultados_in <- list(
original =  aplicar_analisis_dea(datos, "io"),
iteracion_1_vrs = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_2_vrs = aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_1_crs = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "crs", FALSE),
iteracion_2_crs = aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, "io", "crs", FALSE),
resultados = combinar_resultados_iteraciones(original, iteracion_1_vrs, iteracion_2_vrs, iteracion_1_crs, iteracion_2_crs)
)
# DEA - INPUT
resultados_in <- list(
original =  aplicar_analisis_dea(datos, "io"),
iteracion_1_vrs = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_2_vrs = aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_1_crs = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "crs", FALSE),
iteracion_2_crs = aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, "io", "crs", FALSE),
resultados_combinados = combinar_resultados_iteraciones(original, iteracion_1_vrs, iteracion_2_vrs, iteracion_1_crs, iteracion_2_crs),
resultados_correlacion = calcular_y_graficar_correlaciones(resultados_combinados, anios)
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ----------------------------------------------- #
# Periodo previo a pandemia #
anios <- c("2014", "2015", "2016", "2017", "2018", "2019","2020")
# Datos #
datos_iniciales <- list(
"2014" = consolidar_datos_por_anio(2014),
"2015" = consolidar_datos_por_anio(2015),
"2016" = consolidar_datos_por_anio(2016),
"2017" = consolidar_datos_por_anio(2017),
"2018" = consolidar_datos_por_anio(2018),
"2019" = consolidar_datos_por_anio(2019),
"2020" = consolidar_datos_por_anio(2020)
)
# Extraer los conjuntos de DMUs de cada año
dmus_por_anio <- lapply(datos_iniciales, function(data) data$IdEstablecimiento)
# Encontrar las DMUs comunes en todos los años
dmus_comunes <- Reduce(intersect, dmus_por_anio)
# Filtrar los datos de cada año para incluir solo las DMUs comunes
datos <- lapply(datos_iniciales, function(data) data[data$IdEstablecimiento %in% dmus_comunes, ])
# -------------------------------------------- #
# -------------------------------------------- #
# DEA - INPUT
resultados_in <- list(
original =  aplicar_analisis_dea(datos, "io"),
iteracion_1_vrs = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_2_vrs = aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_1_crs = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "crs", FALSE),
iteracion_2_crs = aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, "io", "crs", FALSE),
resultados_combinados = combinar_resultados_iteraciones(original, iteracion_1_vrs, iteracion_2_vrs, iteracion_1_crs, iteracion_2_crs),
resultados_correlacion = calcular_y_graficar_correlaciones(resultados_combinados, anios)
)
# DEA - INPUT
resultados_in <- list(
original =  aplicar_analisis_dea(datos, "io"),
iteracion_1_vrs = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_2_vrs = aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, "io", "vrs", FALSE),
iteracion_1_crs = aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "crs", FALSE),
iteracion_2_crs = aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, "io", "crs", FALSE),
resultados_combinados = combinar_resultados_iteraciones(original, iteracion_1_vrs, iteracion_2_vrs, iteracion_1_crs, iteracion_2_crs),
resultados_correlacion = calcular_y_graficar_correlaciones(resultados_combinados, anios)
)
resultados_iteracion <- function(datos){
original <-  aplicar_analisis_dea(datos, "io")
iteracion_1_vrs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "vrs", FALSE)
iteracion_2_vrs <- aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, "io", "vrs", FALSE)
iteracion_1_crs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "crs", FALSE)
iteracion_2_crs <- aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, "io", "crs", FALSE)
resultados_combinados <- combinar_resultados_iteraciones(original, iteracion_1_vrs, iteracion_2_vrs, iteracion_1_crs, iteracion_2_crs)
resultados_correlacion <- calcular_y_graficar_correlaciones(resultados_combinados, anios)
list(
original =  original,
iteracion_1_vrs = iteracion_1_vrs,
iteracion_2_vrs = iteracion_2_vrs,
iteracion_1_crs = iteracion_1_crs,
iteracion_2_crs = iteracion_2_crs,
resultados_combinados = resultados_combinados,
resultados_correlacion = resultados_correlacion
)
}
# DEA - INPUT
resultados_in <- resultados_iteracion(datos)
resultados_in_cut <- resultados_iteracion(datos_cut)
# DEA - INPUT
resultados_in <- resultados_iteracion(datos)
datos_cut <- datos
eliminar <- c(113170)
# Iterar sobre cada año en la lista
for (anio in names(datos_cut)) {
# Filtrar los datos eliminando la fila con IdEstablecimiento 113170
datos_cut[[anio]] <- datos_cut[[anio]] %>%
filter(!(IdEstablecimiento %in% eliminar))
}
resultados_in_cut <- resultados_iteracion(datos_cut)
View(resultados_in)
# Generar un boxplot para cada columna numérica
boxplot(resultados_in[["original"]][["2014"]][["data"]]$vrs)
# Generar un boxplot para cada columna numérica
boxplot(resultados_in[["original"]][["2014"]][["data"]])
# Generar un boxplot para cada columna numérica
boxplot(resultados_in[["original"]][["2014"]][["data"]]$vrs,
main = "Boxplot de VRS - Año 2014",
ylab = "VRS",
col = "lightgray")
outliers <- boxplot.stats(resultados_in[["original"]][["2014"]][["data"]]$vrs)$out
points(rep(1, length(outliers)), outliers, col = "red", pch = 16)
# Generar un boxplot para cada columna numérica
boxplot(resultados_in[["original"]][["2015"]][["data"]]$vrs,
main = "Boxplot de VRS - Año 2014",
ylab = "VRS",
col = "lightgray")
outliers <- boxplot.stats(resultados_in[["original"]][["2014"]][["data"]]$vrs)$out
points(rep(1, length(outliers)), outliers, col = "red", pch = 16)
outliers <- boxplot.stats(resultados_in[["original"]][["2015"]][["data"]]$vrs)$out
points(rep(1, length(outliers)), outliers, col = "red", pch = 16)
# Filtrar el dataframe para obtener los IDs de los valores atípicos
ids_outliers <- resultados_in[["original"]][["2015"]][["data"]] %>%
filter(vrs %in% outliers_vrs) %>%
select(IdEstablecimiento, vrs)
# Filtrar el dataframe para obtener los IDs de los valores atípicos
ids_outliers <- resultados_in[["original"]][["2015"]][["data"]] %>%
filter(vrs %in% outliers) %>%
select(IdEstablecimiento, vrs)
# Mostrar los IDs de los valores atípicos
ids_outliers
# Crear una lista vacía para almacenar los valores atípicos de cada año
lista_outliers <- list()
# Especificar los años que quieres iterar
anios <- c("2014", "2015", "2016", "2017", "2018", "2019", "2020")
# Iterar sobre cada año
for (anio in anios) {
# Generar el boxplot para la columna "vrs" del año actual
boxplot(resultados_in[["original"]][[anio]][["data"]]$vrs,
main = paste("Boxplot de VRS - Año", anio),
ylab = "VRS",
col = "lightgray")
# Obtener los valores atípicos en la columna "vrs" del año actual
outliers_vrs <- boxplot.stats(resultados_in[["original"]][[anio]][["data"]]$vrs)$out
points(rep(1, length(outliers_vrs)), outliers_vrs, col = "red", pch = 16)
# Filtrar el dataframe para obtener los IDs de los valores atípicos
ids_outliers <- resultados_in[["original"]][[anio]][["data"]] %>%
filter(vrs %in% outliers_vrs) %>%
select(IdEstablecimiento, vrs)
# Añadir los valores atípicos del año actual a la lista, con el nombre del año
lista_outliers[[anio]] <- ids_outliers
}
# Mostrar la lista de valores atípicos
lista_outliers
View(lista_outliers)
# Crear una lista vacía para almacenar los valores atípicos por año
lista_outliers <- list()
# Crear un vector vacío para almacenar todos los valores atípicos sin duplicados
vector_outliers <- c()
# Especificar los años que quieres iterar
anios <- c("2014", "2015", "2016", "2017", "2018", "2019", "2020")
# Iterar sobre cada año
for (anio in anios) {
# Generar el boxplot para la columna "vrs" del año actual
boxplot(resultados_in[["original"]][[anio]][["data"]]$vrs,
main = paste("Boxplot de VRS - Año", anio),
ylab = "VRS",
col = "lightgray")
# Obtener los valores atípicos en la columna "vrs" del año actual
outliers_vrs <- boxplot.stats(resultados_in[["original"]][[anio]][["data"]]$vrs)$out
points(rep(1, length(outliers_vrs)), outliers_vrs, col = "red", pch = 16)
# Filtrar el dataframe para obtener los IDs de los valores atípicos
ids_outliers <- resultados_in[["original"]][[anio]][["data"]] %>%
filter(vrs %in% outliers_vrs) %>%
select(IdEstablecimiento, vrs)
# Añadir los valores atípicos del año actual a la lista, con el nombre del año
lista_outliers[[anio]] <- ids_outliers
# Añadir los IDs al vector de valores atípicos, asegurando que no se repitan
vector_outliers <- unique(c(vector_outliers, ids_outliers$IdEstablecimiento))
}
# Mostrar la lista y el vector de valores atípicos
lista_outliers
vector_outliers
datos_cut <- datos
# Iterar sobre cada año en la lista
for (anio in names(datos_cut)) {
# Filtrar los datos eliminando la fila con IdEstablecimiento 113170
datos_cut[[anio]] <- datos_cut[[anio]] %>%
filter(!(IdEstablecimiento %in% vector_outliers))
}
resultados_in_cut <- resultados_iteracion(datos_cut)
resultados_iteracion <- function(datos){
original <-  aplicar_analisis_dea(datos, "io")
iteracion_1_vrs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "vrs", FALSE)
iteracion_2_vrs <- aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, "io", "vrs", FALSE)
iteracion_1_crs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, "io", "crs", FALSE)
iteracion_2_crs <- aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, "io", "crs", FALSE)
resultados_combinados <- combinar_resultados_iteraciones(original, iteracion_1_vrs, iteracion_2_vrs, iteracion_1_crs, iteracion_2_crs)
resultados_correlacion <- calcular_y_graficar_correlaciones(resultados_combinados, anios)
# Crear una lista vacía para almacenar los valores atípicos por año
lista_outliers <- list()
# Crear un vector vacío para almacenar todos los valores atípicos sin duplicados
vector_outliers <- c()
# Especificar los años que quieres iterar
anios <- c("2014", "2015", "2016", "2017", "2018", "2019", "2020")
# Iterar sobre cada año
for (anio in anios) {
# Generar el boxplot para la columna "vrs" del año actual
boxplot(original[[anio]][["data"]]$vrs,
main = paste("Boxplot de VRS - Año", anio),
ylab = "VRS",
col = "lightgray")
# Obtener los valores atípicos en la columna "vrs" del año actual
outliers_vrs <- boxplot.stats(original[[anio]][["data"]]$vrs)$out
points(rep(1, length(outliers_vrs)), outliers_vrs, col = "red", pch = 16)
# Filtrar el dataframe para obtener los IDs de los valores atípicos
ids_outliers <- original[[anio]][["data"]] %>%
filter(vrs %in% outliers_vrs) %>%
select(IdEstablecimiento, vrs)
# Añadir los valores atípicos del año actual a la lista, con el nombre del año
lista_outliers[[anio]] <- ids_outliers
# Añadir los IDs al vector de valores atípicos, asegurando que no se repitan
vector_outliers <- unique(c(vector_outliers, ids_outliers$IdEstablecimiento))
}
list(
original =  original,
iteracion_1_vrs = iteracion_1_vrs,
iteracion_2_vrs = iteracion_2_vrs,
iteracion_1_crs = iteracion_1_crs,
iteracion_2_crs = iteracion_2_crs,
resultados_combinados = resultados_combinados,
resultados_correlacion = resultados_correlacion,
lista_outliers = lista_outliers,
vector_outliers = vector_outliers
)
}
# DEA - INPUT
resultados_in <- resultados_iteracion(datos)
View(resultados_in)
datos_cut <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_in[["vector_outliers"]]))
})
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ----------------------------------------------- #
# Periodo previo a pandemia #
anios <- c("2014", "2015", "2016", "2017", "2018", "2019","2020")
# Datos #
datos_iniciales <- list(
"2014" = consolidar_datos_por_anio(2014),
"2015" = consolidar_datos_por_anio(2015),
"2016" = consolidar_datos_por_anio(2016),
"2017" = consolidar_datos_por_anio(2017),
"2018" = consolidar_datos_por_anio(2018),
"2019" = consolidar_datos_por_anio(2019),
"2020" = consolidar_datos_por_anio(2020)
)
# Extraer los conjuntos de DMUs de cada año
dmus_por_anio <- lapply(datos_iniciales, function(data) data$IdEstablecimiento)
# Encontrar las DMUs comunes en todos los años
dmus_comunes <- Reduce(intersect, dmus_por_anio)
# Filtrar los datos de cada año para incluir solo las DMUs comunes
datos <- lapply(datos_iniciales, function(data) data[data$IdEstablecimiento %in% dmus_comunes, ])
# -------------------------------------------- #
#  CÁLCULO DEA INPUT
# -------------------------------------------- #
# DEA - INPUT
resultados_in <- resultados_iteracion(datos)
# --------------------------------------------------------------#
# Eliminando aquellos datos ma
# 109102 -> Instituto Psiquiátrico Dr José Horwitz Barak
# 113170 -> Hospital Psiquiátrico El Peral (Santiago, Puente Alto)
#
datos_cut <- lapply(datos, function(df) {
df %>% filter(!(IdEstablecimiento %in% resultados_in[["vector_outliers"]]))
})
resultados_in_cut <- resultados_iteracion(datos_cut)
