library(corrplot)
library(gridExtra)
library(purrr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# Datos #
datos <- list(
"2014" = consolidar_datos_por_anio(2014),
"2015" = consolidar_datos_por_anio(2015),
"2016" = consolidar_datos_por_anio(2016),
"2017" = consolidar_datos_por_anio(2017),
"2018" = consolidar_datos_por_anio(2018),
"2019" = consolidar_datos_por_anio(2019)
)
# DEA - INPUT
resultados_in <- aplicar_analisis_dea(datos, "io")
# SENSIBILIDAD - VRS
resultados_in_2_vrs <- aplicar_sensibilidad(datos, lapply(resultados_in, `[[`, "data"), 0.99, "io", "vrs", FALSE)
resultados_in_3_vrs <- aplicar_sensibilidad(datos, lapply(resultados_in_2_vrs, `[[`, "data"), 0.99, "io", "vrs", FALSE)
# SENSIBILIDAD - CRS
resultados_in_2_crs <- aplicar_sensibilidad(datos, lapply(resultados_in, `[[`, "data"), 0.99, "io", "crs", FALSE)
resultados_in_3_crs <- aplicar_sensibilidad(datos, lapply(resultados_in_2_crs, `[[`, "data"), 0.99, "io", "crs", FALSE)
# Llamar a la función
lista_resultados_combinados_in <- combinar_resultados_iteraciones(resultados_in, resultados_in_2_vrs, resultados_in_3_vrs, resultados_in_2_crs, resultados_in_3_crs)
anios <- c("2014", "2015", "2016", "2017", "2018", "2019")
resultados <- calcular_y_graficar_correlaciones(lista_resultados_combinados_in, anios)
# Mostrar gráficos VRS
lapply(graficos_vrs, function(graficos) {
grid.arrange(grobs = graficos, ncol = 3)
})
# Generar y mostrar gráficos CRS
graficos_crs <- list(
generar_graficos_iteracion(resultados_in, "Input CRS", "crs"),
generar_graficos_iteracion(resultados_in_2_crs, "Input CRS", "crs"),
generar_graficos_iteracion(resultados_in_3_crs, "Input CRS", "crs")
)
# Mostrar gráficos CRS
lapply(graficos_crs, function(graficos) {
grid.arrange(grobs = graficos, ncol = 3)
})
# Iterar sobre los años y mostrar los gráficos
anios <- c("2014", "2015", "2016", "2017", "2018", "2019")
for (anio in anios) {
graficos_vrs <- generar_graficos_por_anio(anio, "Input - VRS")
# Mostrar los gráficos en una fila (3 gráficos por año)
grid.arrange(grobs = graficos_vrs, ncol = 3, top = paste("Comparación de Eficiencia Input VRS - Año", anio))
}
for (anio in anios) {
graficos_crs <- generar_graficos_por_anio_crs(anio, "CRS")
# Mostrar los gráficos en una fila (3 gráficos por año)
grid.arrange(grobs = graficos, ncol = 3, top = paste("Comparación de Eficiencia Input CRS - Año", anio))
}
resultados_out <- aplicar_analisis_dea(datos, "oo")
# SENSIBILIDAD - VRS
# SE ELIMINAN AQUELLOS DMU QUE SON EFICIENTES
resultados_out_2_vrs <- aplicar_sensibilidad(datos, lapply(resultados_out, `[[`, "data"), 1, "oo", "vrs", TRUE)
resultados_out_3_vrs <- aplicar_sensibilidad(datos, lapply(resultados_out_2_vrs, `[[`, "data"), 1, "oo", "vrs", TRUE)
# SENSIBILIDAD - CRS
resultados_out_2_crs <- aplicar_sensibilidad(datos, lapply(resultados_out, `[[`, "data"), 1, "oo", "crs", TRUE)
resultados_out_3_crs <- aplicar_sensibilidad(datos, lapply(resultados_out_2_crs, `[[`, "data"), 1, "oo", "crs", TRUE)
# SENSIBILIDAD - ESCALA
# resultados_in_2_esc <- aplicar_sensibilidad(datos, lapply(resultados_in, `[[`, "data"), 0.99, "io", "esc")
# resultados_in_3_esc <- aplicar_sensibilidad(datos, lapply(resultados_in_2_esc, `[[`, "data"), 0.99, "io", "esc")
# Llamar a la función
lista_resultados_combinados_out <- combinar_resultados_iteraciones(resultados_out, resultados_out_2_vrs, resultados_out_3_vrs, resultados_out_2_crs, resultados_out_3_crs)
anios <- c("2014", "2015", "2016", "2017", "2018", "2019")
resultados <- calcular_y_graficar_correlaciones(lista_resultados_combinados_out, anios)
# Graficas #
# Generar y mostrar gráficos VRS
graficos_vrs <- list(
generar_graficos_iteracion(resultados_in, "Output VRS", "vrs"),
generar_graficos_iteracion(resultados_in_2_vrs, "Output VRS", "vrs"),
generar_graficos_iteracion(resultados_in_3_vrs, "Output VRS", "vrs")
)
# Mostrar gráficos VRS
lapply(graficos_vrs, function(graficos) {
grid.arrange(grobs = graficos, ncol = 3)
})
# Graficas #
# Generar y mostrar gráficos VRS
graficos_vrs_out <- list(
generar_graficos_iteracion(resultados_out, "Output VRS", "vrs"),
generar_graficos_iteracion(resultados_out_2_vrs, "Output VRS", "vrs"),
generar_graficos_iteracion(resultados_out_3_vrs, "Output VRS", "vrs")
)
# Mostrar gráficos VRS
lapply(graficos_vrs_out, function(graficos) {
grid.arrange(grobs = graficos, ncol = 3)
})
# Generar y mostrar gráficos CRS
graficos_crs <- list(
generar_graficos_iteracion(resultados_in, "Output CRS", "crs"),
generar_graficos_iteracion(resultados_in_2_crs, "Output CRS", "crs"),
generar_graficos_iteracion(resultados_in_3_crs, "Output CRS", "crs")
)
# Generar y mostrar gráficos CRS
graficos_crs_out <- list(
generar_graficos_iteracion(resultados_out, "Output CRS", "crs"),
generar_graficos_iteracion(resultados_out_2_crs, "Output CRS", "crs"),
generar_graficos_iteracion(resultados_out_3_crs, "Output CRS", "crs")
)
# Mostrar gráficos CRS
lapply(graficos_crs_out, function(graficos) {
grid.arrange(grobs = graficos, ncol = 3)
})
View(resultados_out)
View(resultados_out)
View(resultados_out[["2014"]][["data"]])
