# Encontrar las DMUs comunes en todos los años y filtrar los datos para incluir solo esas DMUs
dmus_comunes <- Reduce(intersect, lapply(datos_iniciales, `[[`, "IdEstablecimiento"))
datos <- lapply(datos_iniciales, function(data) data[data$IdEstablecimiento %in% dmus_comunes, ])
#  SENSIBILIDAD - ELIMINACION EFICIENTES
resultados <- list(io = resultados_iteracion(datos, "io"),oo = resultados_iteracion(datos, "oo"))
#  ELIMINACIÓN DE DATOS ATÍPICOS
datos_sin_atipicos <- datos_filtrados_atipicos(datos,resultados)
resultados_sin_atipicos <- list(
vrs_io = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "oo")),
crs_io = list(io = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "oo")),
vrs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "oo")),
crs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "oo"))
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ==============================================
#  PRE PROCESAMIENTO DE DATOS
# ==============================================
#  CONSOLIDADO DE DATOS POR AÑO
anios <- 2014:2023
anios_pre_pandemia <- c("2014", "2015", "2016", "2017", "2018", "2019")
anios_pandemia <- c("2020", "2021", "2022", "2023")
datos_iniciales <- lapply(anios, consolidar_datos_por_anio)
names(datos_iniciales) <- as.character(anios)
# Encontrar las DMUs comunes en todos los años y filtrar los datos para incluir solo esas DMUs
dmus_comunes <- Reduce(intersect, lapply(datos_iniciales, `[[`, "IdEstablecimiento"))
datos <- lapply(datos_iniciales, function(data) data[data$IdEstablecimiento %in% dmus_comunes, ])
# ==============================================
#  CÁLCULO DEA
# ==============================================
#  SENSIBILIDAD - ELIMINACION EFICIENTES
resultados <- list(io = resultados_iteracion(datos, "io"),oo = resultados_iteracion(datos, "oo"))
# CORRELACION DE VALORES ORIGINALES PARA TODAS LAS COMBINACIONES EN TODOS LOS AÑOS
resultados_combinaciones <- combinar_resultados_in_out(resultados$io[["original"]], resultados$oo[["original"]])
correlacion_todos_metodos <- calcular_correlaciones_all(resultados_combinaciones)
#  ELIMINACIÓN DE DATOS ATÍPICOS
datos_sin_atipicos <- datos_filtrados_atipicos(datos,resultados)
resultados_sin_atipicos <- list(
vrs_io = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "oo")),
crs_io = list(io = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "oo")),
vrs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "oo")),
crs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "oo"))
)
View(datos_sin_atipicos)
# ==============================================
#  COMBINACIÓN DE RESULTADO DE ITERACIONES
# ==============================================
combinar_resultados_iteraciones <- function(resultados_in,
resultados_in_2_vrs, resultados_in_3_vrs,
resultados_in_2_crs, resultados_in_3_crs,
resultados_in_2_esc, resultados_in_3_esc) {
# Crear una lista de dataframes, uno por cada año, con valores de VRS y CRS
lista_resultados_combinados <- lapply(unique(names(resultados_in)), function(anio) {
# Seleccionar los datos de las iteraciones de VRS
df_vrs_1 <- resultados_in[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_1 = vrs)
df_vrs_2 <- resultados_in_2_vrs[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_2 = vrs)
df_vrs_3 <- resultados_in_3_vrs[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_3 = vrs)
# Unir los dataframes de VRS por IdEstablecimiento
df_vrs_combinado <- df_vrs_1 %>%
full_join(df_vrs_2, by = "IdEstablecimiento") %>%
full_join(df_vrs_3, by = "IdEstablecimiento") %>%
mutate(
vrs_iteracion_1 = ifelse(is.na(vrs_iteracion_1), "NO APLICA", vrs_iteracion_1),
vrs_iteracion_2 = ifelse(is.na(vrs_iteracion_2), "NO APLICA", vrs_iteracion_2),
vrs_iteracion_3 = ifelse(is.na(vrs_iteracion_3), "NO APLICA", vrs_iteracion_3)
)
# Seleccionar los datos de las iteraciones de CRS
df_crs_1 <- resultados_in[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_1 = crs)
df_crs_2 <- resultados_in_2_crs[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_2 = crs)
df_crs_3 <- resultados_in_3_crs[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_3 = crs)
# Unir los dataframes de CRS por IdEstablecimiento
df_crs_combinado <- df_crs_1 %>%
full_join(df_crs_2, by = "IdEstablecimiento") %>%
full_join(df_crs_3, by = "IdEstablecimiento") %>%
mutate(
crs_iteracion_1 = ifelse(is.na(crs_iteracion_1), "NO APLICA", crs_iteracion_1),
crs_iteracion_2 = ifelse(is.na(crs_iteracion_2), "NO APLICA", crs_iteracion_2),
crs_iteracion_3 = ifelse(is.na(crs_iteracion_3), "NO APLICA", crs_iteracion_3)
)
# Seleccionar los datos de las iteraciones de CRS
df_esc_1 <- resultados_in[[anio]]$data %>%
select(IdEstablecimiento, escala) %>%
rename(esc_iteracion_1 = escala)
df_esc_2 <- resultados_in_2_esc[[anio]]$data %>%
select(IdEstablecimiento, escala) %>%
rename(esc_iteracion_2 = escala)
df_esc_3 <- resultados_in_3_esc[[anio]]$data %>%
select(IdEstablecimiento, escala) %>%
rename(esc_iteracion_3 = escala)
# Unir los dataframes de CRS por IdEstablecimiento
df_esc_combinado <- df_esc_1 %>%
full_join(df_esc_2, by = "IdEstablecimiento") %>%
full_join(df_esc_3, by = "IdEstablecimiento") %>%
mutate(
esc_iteracion_1 = ifelse(is.na(esc_iteracion_1), "NO APLICA", esc_iteracion_1),
esc_iteracion_2 = ifelse(is.na(esc_iteracion_2), "NO APLICA", esc_iteracion_2),
esc_iteracion_3 = ifelse(is.na(esc_iteracion_3), "NO APLICA", esc_iteracion_3)
)
# Unir los resultados de VRS y CRS en un solo dataframe por IdEstablecimiento
df_combinado <- df_vrs_combinado %>%
full_join(df_crs_combinado, by = "IdEstablecimiento") %>%
full_join(df_esc_combinado, by = "IdEstablecimiento")
return(df_combinado)
})
# Nombrar la lista con los años para identificación
names(lista_resultados_combinados) <- unique(names(resultados_in))
return(lista_resultados_combinados)
}
# ==============================================
#  GENERACIÓN DE RESULTADOS DE ITERACION
# ==============================================
resultados_iteracion <- function(datos, orientacion){
anios <- c("2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022","2023")
original <-  sapply(datos, function(data) analisis_dea_general(data, orientacion), simplify = FALSE)
#aplicar_analisis_dea(datos, orientacion)
if (orientacion == "io"){
iteracion_1_vrs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "vrs", FALSE)
iteracion_2_vrs <- aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, orientacion, "vrs", FALSE)
iteracion_1_crs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "crs", FALSE)
iteracion_2_crs <- aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, orientacion, "crs", FALSE)
#iteracion_1_esc <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "escala", FALSE)
#iteracion_2_esc <- aplicar_sensibilidad(datos, lapply(iteracion_1_esc, `[[`, "data"), 0.99, orientacion, "escala", FALSE)
}else{
iteracion_1_vrs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "vrs", FALSE)
iteracion_2_vrs <- aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 1, orientacion, "vrs", FALSE)
iteracion_1_crs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "crs", FALSE)
iteracion_2_crs <- aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 1, orientacion, "crs", FALSE)
iteracion_1_esc <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "escala", FALSE)
iteracion_2_esc <- aplicar_sensibilidad(datos, lapply(iteracion_1_esc, `[[`, "data"), 1, orientacion, "escala", FALSE)
}
resultados_combinados <- combinar_resultados_iteraciones(original, iteracion_1_vrs, iteracion_2_vrs,
iteracion_1_crs, iteracion_2_crs,
iteracion_1_esc, iteracion_2_esc)
resultados_correlacion <- calcular_correlaciones_all(resultados_combinados)
lista_outliers_vrs <- list()
vector_outliers_vrs <- c()
lista_outliers_crs <- list()
vector_outliers_crs <- c()
# Especificar los años que quieres iterar
for (anio in anios) {
# ----------------- #
# Generar y almacenar los valores atípicos de VRS
outliers_vrs <- boxplot.stats(original[[anio]][["data"]]$vrs)$out
ids_outliers_vrs <- original[[anio]][["data"]] %>%
filter(vrs %in% outliers_vrs) %>%
select(IdEstablecimiento, vrs)
lista_outliers_vrs[[anio]] <- ids_outliers_vrs
vector_outliers_vrs <- unique(c(vector_outliers_vrs, ids_outliers_vrs$IdEstablecimiento))
# ----------------- #
# Generar y almacenar los valores atípicos de CRS
outliers_crs <- boxplot.stats(original[[anio]][["data"]]$crs)$out
ids_outliers_crs <- original[[anio]][["data"]] %>%
filter(crs %in% outliers_crs) %>%
select(IdEstablecimiento, crs)
lista_outliers_crs[[anio]] <- ids_outliers_crs
vector_outliers_crs <- unique(c(vector_outliers_crs, ids_outliers_crs$IdEstablecimiento))
}
list(
original =  original,
iteracion_1_vrs = iteracion_1_vrs,
iteracion_2_vrs = iteracion_2_vrs,
iteracion_1_crs = iteracion_1_crs,
iteracion_2_crs = iteracion_2_crs,
resultados_combinados = resultados_combinados,
resultados_correlacion = resultados_correlacion,
lista_outliers_vrs = lista_outliers_vrs,
vector_outliers_vrs = vector_outliers_vrs,
lista_outliers_crs = lista_outliers_crs,
vector_outliers_crs = vector_outliers_crs
)
}
resultados_sin_atipicos <- list(
#esc_io = list(io = resultados_iteracion(datos_sin_atipicos[["esc_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["esc_io"]], "oo")),
#esc_oo = list(io = resultados_iteracion(datos_sin_atipicos[["esc_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["esc_oo"]], "oo")),
vrs_io = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "oo")),
crs_io = list(io = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "oo")),
#vrs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "oo")),
#crs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "oo"))
)
# ==============================================
#  COMBINACIÓN DE RESULTADO DE ITERACIONES
# ==============================================
combinar_resultados_iteraciones <- function(resultados_in,
resultados_in_2_vrs, resultados_in_3_vrs,
resultados_in_2_crs, resultados_in_3_crs) {
# Crear una lista de dataframes, uno por cada año, con valores de VRS y CRS
lista_resultados_combinados <- lapply(unique(names(resultados_in)), function(anio) {
# Seleccionar los datos de las iteraciones de VRS
df_vrs_1 <- resultados_in[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_1 = vrs)
df_vrs_2 <- resultados_in_2_vrs[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_2 = vrs)
df_vrs_3 <- resultados_in_3_vrs[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_3 = vrs)
# Unir los dataframes de VRS por IdEstablecimiento
df_vrs_combinado <- df_vrs_1 %>%
full_join(df_vrs_2, by = "IdEstablecimiento") %>%
full_join(df_vrs_3, by = "IdEstablecimiento") %>%
mutate(
vrs_iteracion_1 = ifelse(is.na(vrs_iteracion_1), "NO APLICA", vrs_iteracion_1),
vrs_iteracion_2 = ifelse(is.na(vrs_iteracion_2), "NO APLICA", vrs_iteracion_2),
vrs_iteracion_3 = ifelse(is.na(vrs_iteracion_3), "NO APLICA", vrs_iteracion_3)
)
# Seleccionar los datos de las iteraciones de CRS
df_crs_1 <- resultados_in[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_1 = crs)
df_crs_2 <- resultados_in_2_crs[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_2 = crs)
df_crs_3 <- resultados_in_3_crs[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_3 = crs)
# Unir los dataframes de CRS por IdEstablecimiento
df_crs_combinado <- df_crs_1 %>%
full_join(df_crs_2, by = "IdEstablecimiento") %>%
full_join(df_crs_3, by = "IdEstablecimiento") %>%
mutate(
crs_iteracion_1 = ifelse(is.na(crs_iteracion_1), "NO APLICA", crs_iteracion_1),
crs_iteracion_2 = ifelse(is.na(crs_iteracion_2), "NO APLICA", crs_iteracion_2),
crs_iteracion_3 = ifelse(is.na(crs_iteracion_3), "NO APLICA", crs_iteracion_3)
)
# Unir los resultados de VRS y CRS en un solo dataframe por IdEstablecimiento
df_combinado <- df_vrs_combinado %>%
full_join(df_crs_combinado, by = "IdEstablecimiento")
return(df_combinado)
})
# Nombrar la lista con los años para identificación
names(lista_resultados_combinados) <- unique(names(resultados_in))
return(lista_resultados_combinados)
}
resultados_sin_atipicos <- list(
#esc_io = list(io = resultados_iteracion(datos_sin_atipicos[["esc_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["esc_io"]], "oo")),
#esc_oo = list(io = resultados_iteracion(datos_sin_atipicos[["esc_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["esc_oo"]], "oo")),
vrs_io = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "oo")),
crs_io = list(io = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "oo")),
#vrs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "oo")),
#crs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "oo"))
)
# ==============================================
#  GENERACIÓN DE RESULTADOS DE ITERACION
# ==============================================
resultados_iteracion <- function(datos, orientacion){
anios <- c("2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022","2023")
original <-  sapply(datos, function(data) analisis_dea_general(data, orientacion), simplify = FALSE)
#aplicar_analisis_dea(datos, orientacion)
if (orientacion == "io"){
iteracion_1_vrs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "vrs", FALSE)
iteracion_2_vrs <- aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, orientacion, "vrs", FALSE)
iteracion_1_crs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "crs", FALSE)
iteracion_2_crs <- aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, orientacion, "crs", FALSE)
iteracion_1_esc <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "escala", FALSE)
iteracion_2_esc <- aplicar_sensibilidad(datos, lapply(iteracion_1_esc, `[[`, "data"), 0.99, orientacion, "escala", FALSE)
}else{
iteracion_1_vrs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "vrs", FALSE)
iteracion_2_vrs <- aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 1, orientacion, "vrs", FALSE)
iteracion_1_crs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "crs", FALSE)
iteracion_2_crs <- aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 1, orientacion, "crs", FALSE)
iteracion_1_esc <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "escala", FALSE)
iteracion_2_esc <- aplicar_sensibilidad(datos, lapply(iteracion_1_esc, `[[`, "data"), 1, orientacion, "escala", FALSE)
}
resultados_combinados <- combinar_resultados_iteraciones(original,
iteracion_1_vrs, iteracion_2_vrs,
iteracion_1_crs, iteracion_2_crs,
iteracion_1_esc, iteracion_2_esc)
resultados_correlacion <- calcular_correlaciones_all_2(resultados_combinados)
lista_outliers_vrs <- list()
vector_outliers_vrs <- c()
lista_outliers_crs <- list()
vector_outliers_crs <- c()
# Especificar los años que quieres iterar
for (anio in anios) {
# ----------------- #
# Generar y almacenar los valores atípicos de VRS
outliers_vrs <- boxplot.stats(original[[anio]][["data"]]$vrs)$out
ids_outliers_vrs <- original[[anio]][["data"]] %>%
filter(vrs %in% outliers_vrs) %>%
select(IdEstablecimiento, vrs)
lista_outliers_vrs[[anio]] <- ids_outliers_vrs
vector_outliers_vrs <- unique(c(vector_outliers_vrs, ids_outliers_vrs$IdEstablecimiento))
# ----------------- #
# Generar y almacenar los valores atípicos de CRS
outliers_crs <- boxplot.stats(original[[anio]][["data"]]$crs)$out
ids_outliers_crs <- original[[anio]][["data"]] %>%
filter(crs %in% outliers_crs) %>%
select(IdEstablecimiento, crs)
lista_outliers_crs[[anio]] <- ids_outliers_crs
vector_outliers_crs <- unique(c(vector_outliers_crs, ids_outliers_crs$IdEstablecimiento))
}
list(
original =  original,
iteracion_1_vrs = iteracion_1_vrs,
iteracion_2_vrs = iteracion_2_vrs,
iteracion_1_crs = iteracion_1_crs,
iteracion_2_crs = iteracion_2_crs,
resultados_combinados = resultados_combinados,
resultados_correlacion = resultados_correlacion,
lista_outliers_vrs = lista_outliers_vrs,
vector_outliers_vrs = vector_outliers_vrs,
lista_outliers_crs = lista_outliers_crs,
vector_outliers_crs = vector_outliers_crs
)
}
# ==============================================
#  COMBINACIÓN DE RESULTADO DE ITERACIONES
# ==============================================
combinar_resultados_iteraciones <- function(resultados_in,
resultados_in_2_vrs, resultados_in_3_vrs,
resultados_in_2_crs, resultados_in_3_crs,
resultados_in_2_esc, resultados_in_3_esc) {
# Crear una lista de dataframes, uno por cada año, con valores de VRS y CRS
lista_resultados_combinados <- lapply(unique(names(resultados_in)), function(anio) {
# Seleccionar los datos de las iteraciones de VRS
df_vrs_1 <- resultados_in[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_1 = vrs)
df_vrs_2 <- resultados_in_2_vrs[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_2 = vrs)
df_vrs_3 <- resultados_in_3_vrs[[anio]]$data %>%
select(IdEstablecimiento, vrs) %>%
rename(vrs_iteracion_3 = vrs)
# Unir los dataframes de VRS por IdEstablecimiento
df_vrs_combinado <- df_vrs_1 %>%
full_join(df_vrs_2, by = "IdEstablecimiento") %>%
full_join(df_vrs_3, by = "IdEstablecimiento") %>%
mutate(
vrs_iteracion_1 = ifelse(is.na(vrs_iteracion_1), "NO APLICA", vrs_iteracion_1),
vrs_iteracion_2 = ifelse(is.na(vrs_iteracion_2), "NO APLICA", vrs_iteracion_2),
vrs_iteracion_3 = ifelse(is.na(vrs_iteracion_3), "NO APLICA", vrs_iteracion_3)
)
# Seleccionar los datos de las iteraciones de CRS
df_crs_1 <- resultados_in[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_1 = crs)
df_crs_2 <- resultados_in_2_crs[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_2 = crs)
df_crs_3 <- resultados_in_3_crs[[anio]]$data %>%
select(IdEstablecimiento, crs) %>%
rename(crs_iteracion_3 = crs)
# Unir los dataframes de CRS por IdEstablecimiento
df_crs_combinado <- df_crs_1 %>%
full_join(df_crs_2, by = "IdEstablecimiento") %>%
full_join(df_crs_3, by = "IdEstablecimiento") %>%
mutate(
crs_iteracion_1 = ifelse(is.na(crs_iteracion_1), "NO APLICA", crs_iteracion_1),
crs_iteracion_2 = ifelse(is.na(crs_iteracion_2), "NO APLICA", crs_iteracion_2),
crs_iteracion_3 = ifelse(is.na(crs_iteracion_3), "NO APLICA", crs_iteracion_3)
)
# Seleccionar los datos de las iteraciones de CRS
df_esc_1 <- resultados_in[[anio]]$data %>%
select(IdEstablecimiento, escala) %>%
rename(esc_iteracion_1 = escala)
df_esc_2 <- resultados_in_2_esc[[anio]]$data %>%
select(IdEstablecimiento, escala) %>%
rename(esc_iteracion_2 = escala)
df_esc_3 <- resultados_in_3_esc[[anio]]$data %>%
select(IdEstablecimiento, escala) %>%
rename(esc_iteracion_3 = escala)
# Unir los dataframes de CRS por IdEstablecimiento
df_esc_combinado <- df_esc_1 %>%
full_join(df_esc_2, by = "IdEstablecimiento") %>%
full_join(df_esc_3, by = "IdEstablecimiento") %>%
mutate(
esc_iteracion_1 = ifelse(is.na(esc_iteracion_1), "NO APLICA", esc_iteracion_1),
esc_iteracion_2 = ifelse(is.na(esc_iteracion_2), "NO APLICA", esc_iteracion_2),
esc_iteracion_3 = ifelse(is.na(esc_iteracion_3), "NO APLICA", esc_iteracion_3)
)
# Unir los resultados de VRS y CRS en un solo dataframe por IdEstablecimiento
df_combinado <- df_vrs_combinado %>%
full_join(df_crs_combinado, by = "IdEstablecimiento") %>%
full_join(df_esc_combinado, by = "IdEstablecimiento")
return(df_combinado)
})
# Nombrar la lista con los años para identificación
names(lista_resultados_combinados) <- unique(names(resultados_in))
return(lista_resultados_combinados)
}
# ==============================================
#  GENERACIÓN DE RESULTADOS DE ITERACION
# ==============================================
resultados_iteracion <- function(datos, orientacion){
anios <- c("2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022","2023")
original <-  sapply(datos, function(data) analisis_dea_general(data, orientacion), simplify = FALSE)
#aplicar_analisis_dea(datos, orientacion)
if (orientacion == "io"){
iteracion_1_vrs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "vrs", FALSE)
iteracion_2_vrs <- aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 0.99, orientacion, "vrs", FALSE)
iteracion_1_crs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "crs", FALSE)
iteracion_2_crs <- aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 0.99, orientacion, "crs", FALSE)
iteracion_1_esc <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 0.99, orientacion, "escala", FALSE)
iteracion_2_esc <- aplicar_sensibilidad(datos, lapply(iteracion_1_esc, `[[`, "data"), 0.99, orientacion, "escala", FALSE)
}else{
iteracion_1_vrs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "vrs", FALSE)
iteracion_2_vrs <- aplicar_sensibilidad(datos, lapply(iteracion_1_vrs, `[[`, "data"), 1, orientacion, "vrs", FALSE)
iteracion_1_crs <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "crs", FALSE)
iteracion_2_crs <- aplicar_sensibilidad(datos, lapply(iteracion_1_crs, `[[`, "data"), 1, orientacion, "crs", FALSE)
iteracion_1_esc <- aplicar_sensibilidad(datos, lapply(original, `[[`, "data"), 1, orientacion, "escala", FALSE)
iteracion_2_esc <- aplicar_sensibilidad(datos, lapply(iteracion_1_esc, `[[`, "data"), 1, orientacion, "escala", FALSE)
}
resultados_combinados <- combinar_resultados_iteraciones(original,
iteracion_1_vrs, iteracion_2_vrs,
iteracion_1_crs, iteracion_2_crs,
iteracion_1_esc, iteracion_2_esc)
resultados_correlacion <- calcular_correlaciones_all_2(resultados_combinados)
lista_outliers_vrs <- list()
vector_outliers_vrs <- c()
lista_outliers_crs <- list()
vector_outliers_crs <- c()
# Especificar los años que quieres iterar
for (anio in anios) {
# ----------------- #
# Generar y almacenar los valores atípicos de VRS
outliers_vrs <- boxplot.stats(original[[anio]][["data"]]$vrs)$out
ids_outliers_vrs <- original[[anio]][["data"]] %>%
filter(vrs %in% outliers_vrs) %>%
select(IdEstablecimiento, vrs)
lista_outliers_vrs[[anio]] <- ids_outliers_vrs
vector_outliers_vrs <- unique(c(vector_outliers_vrs, ids_outliers_vrs$IdEstablecimiento))
# ----------------- #
# Generar y almacenar los valores atípicos de CRS
outliers_crs <- boxplot.stats(original[[anio]][["data"]]$crs)$out
ids_outliers_crs <- original[[anio]][["data"]] %>%
filter(crs %in% outliers_crs) %>%
select(IdEstablecimiento, crs)
lista_outliers_crs[[anio]] <- ids_outliers_crs
vector_outliers_crs <- unique(c(vector_outliers_crs, ids_outliers_crs$IdEstablecimiento))
}
list(
original =  original,
iteracion_1_vrs = iteracion_1_vrs,
iteracion_2_vrs = iteracion_2_vrs,
iteracion_1_crs = iteracion_1_crs,
iteracion_2_crs = iteracion_2_crs,
resultados_combinados = resultados_combinados,
resultados_correlacion = resultados_correlacion,
lista_outliers_vrs = lista_outliers_vrs,
vector_outliers_vrs = vector_outliers_vrs,
lista_outliers_crs = lista_outliers_crs,
vector_outliers_crs = vector_outliers_crs
)
}
resultados_sin_atipicos <- list(
#esc_io = list(io = resultados_iteracion(datos_sin_atipicos[["esc_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["esc_io"]], "oo")),
#esc_oo = list(io = resultados_iteracion(datos_sin_atipicos[["esc_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["esc_oo"]], "oo")),
vrs_io = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_io"]], "oo")),
#crs_io = list(io = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_io"]], "oo")),
#vrs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["vrs_oo"]], "oo")),
#crs_oo = list(io = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "io"),oo = resultados_iteracion(datos_sin_atipicos[["crs_oo"]], "oo"))
)
View(resultados)
View(datos_sin_atipicos)
sensibilidad_parametro_general <- function(data, data_original, mayor, valor, orientacion, tipo) {
# Determinar la columna a trabajar (vrs o crs)
browser()
columna <- ifelse(tipo == "vrs", "vrs", ifelse(tipo == "crs", "crs", "escala"))
# Filtrar los datos en función del parámetro `mayor` y el valor dado
if (mayor) {
data_filtrada <- subset(data_original, data_original[[columna]] > valor)
} else {
data_filtrada <- subset(data_original, data_original[[columna]] < valor)
}
# Filtrar el dataset por IdEstablecimiento
data_set <- data[data$IdEstablecimiento %in% data_filtrada$IdEstablecimiento, ]
# Aplicar el análisis DEA
resultados_in  <- analisis_dea_general(data_set, orientacion)
return (resultados = resultados_in)
}
# ==============================================
#
# ==============================================
calcular_correlaciones_all <- function(lista_resultados_combinados_in) {
browser()
# Calcular las matrices de correlación para cada dataframe en la lista
correlaciones_lista <- lapply(lista_resultados_combinados_in, function(df) {
df_num <- df %>%
select(-IdEstablecimiento) %>%
mutate(across(starts_with("vrs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("crs_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA)))) %>%
mutate(across(starts_with("esc_iteracion_"), ~ as.numeric(replace(., . == "NO APLICA", NA))))
cor(df_num[, sapply(df_num, is.numeric)], use = "complete.obs")
})
# Nombrar la lista con los años para identificación
names(correlaciones_lista) <- names(lista_resultados_combinados_in)
# Sumar todas las matrices con `Reduce`:
suma_matrices <- Reduce("+", correlaciones_lista)
# Calcular el promedio dividiendo por la cantidad de matrices
n <- length(correlaciones_lista)
promedio_matriz <- suma_matrices / n
promedio_matriz
# Retornar resultados de correlación entre matrices de distintos años
return(list(correlaciones_lista = correlaciones_lista,
promedio_correlacion = promedio_matriz))
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
