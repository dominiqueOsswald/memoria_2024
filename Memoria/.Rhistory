setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
source("graphics.R")
# ----------------------------------------------- #
# ==============================================
# -------------------------------------------- #
#  CONSOLIDADO DE DATOS POR AÑO
# -------------------------------------------- #
anios <- c("2014", "2015", "2016", "2017", "2018", "2019","2020")
datos_iniciales <- list(
"2014" = consolidar_datos_por_anio(2014),
"2015" = consolidar_datos_por_anio(2015),
"2016" = consolidar_datos_por_anio(2016),
"2017" = consolidar_datos_por_anio(2017),
"2018" = consolidar_datos_por_anio(2018),
"2019" = consolidar_datos_por_anio(2019),
"2020" = consolidar_datos_por_anio(2020)
)
resultados_in <- resultados_iteracion(datos, "io")
dmus_comunes <- Reduce(intersect, lapply(datos_iniciales, `[[`, "IdEstablecimiento"))
datos <- lapply(datos_iniciales, function(data) data[data$IdEstablecimiento %in% dmus_comunes, ])
resultados_in <- resultados_iteracion(datos, "io")
# ==============================================
#-------------------------------------#
# DETERMINANTES #
#-------------------------------------#
datos_consolidados <- read.table("data/2014/2014_consolidated_data.csv", sep=";", header=TRUE)
df_vrs <- resultados_in[["original"]][["2014"]][["data"]][, c("IdEstablecimiento", "vrs")] %>%
rename("idEstablecimiento" = "IdEstablecimiento")
df_filtered <- datos_consolidados %>%
filter(idEstablecimiento %in% df_vrs$idEstablecimiento)
# Combinar los dataframes por la columna "ID"
df_merged <- merge(df_filtered, df_vrs, by = "idEstablecimiento", all.x = TRUE)
df_merged <- df_merged[, colSums(is.na(df_merged)) < nrow(df_merged)]
library(AER)
df_merged[is.na(df_merged)] <- 0
# Dividir las variables en bloques de 1000
chunk_size <- 10
chunks <- split(variables_independientes, ceiling(seq_along(variables_independientes) / chunk_size))
variables_independientes <- colnames(datos_consolidados[,-1])
chunks <- split(variables_independientes, ceiling(seq_along(variables_independientes) / chunk_size))
sapply(df_merged, function(x) if (is.factor(x)) levels(x))
# Ajustar modelos por partes
resultados <- lapply(chunks, function(vars) {
formula <- as.formula(paste("vrs ~", paste(vars, collapse = " + ")))
tobit(formula, data = df_merged[,-1], left = 0)
})
variables_independientes[1:10]
formula <- as.formula(paste("vrs ~", paste(variables_independientes[1:10], collapse = " + ")))
formula
tobit(formula, data = df_merged[,-1], left = 0)
tobit_1 <- tobit(formula, data = df_merged[,-1], left = 0)
View(tobit_1)
variances <- apply(datos_consolidados[, variables_independientes], 2, var, na.rm = TRUE)
filtered_vars <- names(variances[variances > 0.1])  # Umbral ajustable
filtered_vars_var <- names(variances[variances > 0.1])  # Umbral ajustable
data_filtered_vars <- datos_consolidados[,filtered_vars_var]
filtered_vars_var <- names(variances[variances > 0.1])  # Umbral ajustable
data_filtered_vars <- datos_consolidados[,filtered_vars_var]
data_filtered_vars <- datos_consolidados[, filtered_vars_var]
filtered_vars <- names(variances[variances > 0.1])  # Umbral ajustable
# Crear un nuevo dataframe con las columnas en filtered_vars
filtered_data <- data[, filtered_vars]
# Crear un nuevo dataframe con las columnas en filtered_vars
filtered_data <- datos_consolidados[, filtered_vars]
missing_vars <- setdiff(filtered_vars, colnames(datos_consolidados))
data_filtered_vars <- datos_consolidados[, filtered_vars_var]
data_filtered_vars <- datos_consolidados %>% select(all_of(filtered_vars))
# ==============================================
#-------------------------------------#
# DETERMINANTES #
#-------------------------------------#
datos_consolidados <- read.table("data/2014/2014_consolidated_data.csv", sep=";", header=TRUE)
variables_independientes <- colnames(datos_consolidados)
variances <- apply(datos_consolidados[, variables_independientes], 2, var, na.rm = TRUE)
filtered_vars <- names(variances[variances > 0.1])  # Umbral ajustable
data_filtered_vars <- datos_consolidados %>% select(all_of(filtered_vars))
# Crear un nuevo dataframe con las columnas en filtered_vars
filtered_data <- datos_consolidados[, filtered_vars]
# ==============================================
#-------------------------------------#
# DETERMINANTES #
#-------------------------------------#
datos_consolidados <- read.table("data/2014/2014_consolidated_data.csv", sep=";", header=TRUE)
variables_independientes <- colnames(datos_consolidados)
variances <- apply(datos_consolidados[, variables_independientes], 2, var, na.rm = TRUE)
filtered_vars <- names(variances[variances > 0.1])  # Umbral ajustable
filtered_data <- datos_consolidados[, filtered_vars]
filtered_vars
diff(colnames(datos_consolidados),filtered_vars)
diff(filtered_vars,colnames(datos_consolidados))
setdiff(filtered_vars,colnames(datos_consolidados))
valid_filtered_vars <- intersect(filtered_vars, colnames(datos_consolidados))
print(valid_filtered_vars)
filtered_vars <- intersect(filtered_vars, colnames(datos_consolidados))
data_filtered_vars <- datos_consolidados %>% select(all_of(filtered_vars))
df_vrs <- resultados_in[["original"]][["2014"]][["data"]][, c("IdEstablecimiento", "vrs")] %>%
rename("idEstablecimiento" = "IdEstablecimiento")
df_filtered <- data_filtered_vars %>%
filter(idEstablecimiento %in% df_vrs$idEstablecimiento)
# Combinar los dataframes por la columna "ID"
df_merged <- merge(df_filtered, df_vrs, by = "idEstablecimiento", all.x = TRUE)
df_merged <- df_merged[, colSums(is.na(df_merged)) < nrow(df_merged)]
correlations <- sapply(df_merged[, filtered_vars], function(x) cor(x, df_merged$vrs, use = "complete.obs"))
correlations <- sapply(df_merged, function(x) cor(x, df_merged$vrs, use = "complete.obs"))
df_merged[is.na(df_merged)] <- 0
correlations <- sapply(df_merged, function(x) cor(x, df_merged$vrs, use = "complete.obs"))
View(df_merged)
# Seleccionar solo columnas numéricas
numeric_columns <- sapply(df_merged, is.numeric)
df_numeric <- df_merged[, numeric_columns]
correlations <- sapply(df_numeric, function(x) cor(x, df_numeric$vrs, use = "complete.obs"))
filtered_vars <- names(correlations[abs(correlations) > 0.1])  # Umbral ajustable
# Dividir las variables en bloques de 1000
chunk_size <- 1000
chunks <- split(variables_independientes, ceiling(seq_along(variables_independientes) / chunk_size))
formula <- as.formula(paste("vrs ~", paste(variables_independientes[1:1000], collapse = " + ")))
formula <- as.formula(paste("vrs ~", paste(variables_independientes[1:100], collapse = " + ")))
formula <- as.formula(paste("vrs ~", paste(variables_independientes[1:500], collapse = " + ")))
formula <- as.formula(paste("vrs ~", paste(variables_independientes[1:700], collapse = " + ")))
formula <- as.formula(paste("vrs ~", paste(variables_independientes[1:600], collapse = " + ")))
datos_normalizados <- datos_consolidados %>%
mutate(across(everything(), scale))
datos_consolidados[,"X99000330"]
valores_int <- as.integer(ifelse(grepl("^\\d+$", datos_consolidados), datos_consolidados, NA))
df <- lapply(df[datos_consolidados], as.integer)
df <- lapply(datos_consolidados, as.integer)
View(df)
df <- datos_consolidados
df[colnames(datos_consolidados)] <- lapply(df[colnames(datos_consolidados)], as.integer)
datos_normalizados <- datos_consolidados %>%
mutate(across(everything(), scale))
datos_normalizados <- df %>%
mutate(across(everything(), scale))
View(datos_normalizados)
df <- datos_consolidados
df[colnames(datos_consolidados)] <- lapply(df[colnames(datos_consolidados)], as.integer)
datos_normalizados <- df[,-1] %>%
mutate(across(everything(), scale))
colnames(datos_normalizados)
View(datos_normalizados)
colnames(datos_normalizados)
variables_independientes <- colnames(datos_normalizados)
variances <- apply(datos_normalizados[, variables_independientes], 2, var, na.rm = TRUE)
filtered_vars <- names(variances[variances > 0.1])  # Umbral ajustable
filtered_data <- datos_normalizados[, filtered_vars]
setdiff(filtered_vars,colnames(datos_normalizados))
# No me tinca esto, revisar para que pueda traer todas kas variables
filtered_vars <- intersect(filtered_vars, colnames(datos_normalizados))
filtered_vars <- names(variances[variances > 0.1])  # Umbral ajustable
# No me tinca esto, revisar para que pueda traer todas kas variables
filtered_vars <- intersect(filtered_vars, colnames(datos_normalizados))
filtered_vars <- names(variances[variances > 0.1])  # Umbral ajustable
# No me tinca esto, revisar para que pueda traer todas kas variables
filtered_vars <- intersect(filtered_vars, colnames(datos_normalizados))
library(ggplot2)
filtered_df <- data.frame(
Variable = names(filtered_vars),
Variance = filtered_vars
)
filtered_df <- data.frame(
Variable = names(variances),
Variance = variances
)
View(filtered_df)
variables_independientes <- colnames(df[,-1])
variances <- apply(df[, variables_independientes], 2, var, na.rm = TRUE)
filtered_vars <- names(variances[variances > 0.1])  # Umbral ajustable
library(ggplot2)
filtered_df <- data.frame(
Variable = names(variances),
Variance = variances
)
# Crear el gráfico de barras
ggplot(filtered_df, aes(x = reorder(Variable, Variance), y = Variance)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para mejor visualización
labs(
title = "Variables con varianza mayor al umbral",
x = "Variables",
y = "Varianza"
) +
theme_minimal()
# Crear el gráfico de barras
ggplot(filtered_df, aes(x = reorder(Variable, Variance), y = Variance)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para mejor visualización
labs(
title = "Variables con varianza mayor al umbral",
x = NULL,
y = "Varianza"
) +
theme_minimal()
ggplot(filtered_df, aes(x = reorder(Variable, Variance), y = Variance)) +
geom_bar(stat = "identity") +
coord_flip() +  # Voltear el gráfico para mejor visualización
labs(
title = "Variables con varianza mayor al umbral",
x = NULL,  # Quitar etiqueta del eje X
y = "Varianza"
) +
theme_minimal() +
theme(
axis.text.y = element_blank(),  # Ocultar nombres de las variables
axis.ticks.y = element_blank()  # Ocultar las marcas del eje Y
)
View(datos_consolidados)
# Visualizar la distribución de una variable
hist(datos$X1010101, breaks = 30, main = "Distribución de X1010101", xlab = "Valores")
# Visualizar la distribución de una variable
hist(df$X1010101, breaks = 30, main = "Distribución de X1010101", xlab = "Valores")
View(df)
df$X1010101
# Visualizar la distribución de una variable
hist(df$"X1010101", breaks = 30, main = "Distribución de X1010101", xlab = "Valores")
View(df)
# Visualizar la distribución de una variable
hist(df$"X01010101", breaks = 30, main = "Distribución de X1010101", xlab = "Valores")
# Visualizar la distribución de una variable
hist(df$"X01010101", breaks = 197, main = "Distribución de X1010101", xlab = "Valores")
df_w_vrs <- df %>%
filter(idEstablecimiento %in% df_vrs$idEstablecimiento)
# Combinar los dataframes por la columna "ID"
df_merged <- merge(df_w_vrs, df_vrs, by = "idEstablecimiento", all.x = TRUE)
df_merged <- df_merged[, colSums(is.na(df_merged)) < nrow(df_merged)]
df_merged[is.na(df_merged)] <- 0
correlations <- sapply(df_numeric, function(x) cor(x, df_numeric$vrs, use = "complete.obs"))
filtered_vars <- names(correlations[abs(correlations) > 0.1])  # Umbral ajustable
