data_2021 <- consolidar_datos_por_anio(2021)
View(data_2014)
View(data_2015)
View(data_2019)
consolidar_datos_por_anio <- function(anio) {
# Establecer directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Definir rutas de archivos utilizando el año como variable
path_hospitales <- paste0("data/", anio, "/", anio, "_hospitals.csv")
print("-")
path_predicciones_grd <- paste0("data/", anio, "/", anio, "_prediciones_grd.txt")
print("-")
path_datos_consolidados <- paste0("data/", anio, "/", anio, "_consolidated_data.csv")
print("-")
path_financiero <- paste0("data/", anio, "/", anio, "_financial_data.csv")
print("-")
path_estadisticas <- "data/Consolidado estadísticas hospitalarias 2014-2021.xlsx"
print("1")
# Cargar datos
hospitales <- read.csv(path_hospitales) %>% rename("IdEstablecimiento" = "hospital_id")
predicciones_grd <- read.csv(path_predicciones_grd, sep=",")
datos_consolidados <- read.table(path_datos_consolidados, sep=";", header=TRUE)
financiero <- read.csv(path_financiero) %>%
select(hospital_id, X21_value, X22_value) %>% rename("IdEstablecimiento" = "hospital_id")
financiero$X21_value <- as.numeric(financiero$X21_value)
financiero$X22_value <- as.numeric(financiero$X22_value)
sheet= (anio - 2014) + 1
print(sheet)
print(anio)
print((anio - 2014) + 1)
estadisticas <- read_excel(path_estadisticas, sheet = (anio - 2014) + 1, skip = 1)  %>%
rename("IdEstablecimiento" = "Cód. Estab.", "Region" = "Nombre SS/SEREMI") %>%
filter(`Nombre Nivel Cuidado` == "Datos Establecimiento") %>%
select(-"Cód. Nivel Cuidado", -"Cód. SS/SEREMI", -"Nombre Nivel Cuidado") %>%
semi_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(1:5)
print("3")
# Procesar estadísticas
dias_cama_disponibles <- estadisticas %>%
filter(Glosa == "Dias Cama Disponibles") %>%
select(1:5) %>% rename("dias_cama_disponible" = "Acum") %>% select(-Glosa)
egresos <- estadisticas %>%
filter(Glosa == "Numero de Egresos") %>%
select(1:5) %>% rename("egresos" = "Acum") %>% select(-Glosa)
print("4")
# Definir consultas
consultas <- list("idEstablecimiento", "X07020130", "X07020230", "X07020330", "X07020331",
"X07020332", "X07024219", "X07020500", "X07020501", "X07020600",
"X07020601", "X07020700", "X07020800", "X07020801", "X07020900",
"X07020901", "X07021000", "X07021001", "X07021100", "X07021101",
"X07021230", "X07021300", "X07021301", "X07022000", "X07022001",
"X07021531", "X07022132", "X07022133", "X07022134", "X07021700",
"X07021800", "X07021801", "X07021900", "X07022130", "X07022142",
"X07022143", "X07022144", "X07022135", "X07022136", "X07022137",
"X07022700", "X07022800", "X07022900", "X07021701", "X07023100",
"X07023200", "X07023201", "X07023202", "X07023203", "X07023700",
"X07023701", "X07023702", "X07023703", "X07024000", "X07024001",
"X07024200", "X07030500", "X07024201", "X07024202", "X07030501",
"X07030502")
print("5")
# Seleccionar y convertir columnas válidas
columnas_validas <- intersect(unlist(consultas), colnames(datos_consolidados))
print("5")
str(columnas_validas)
str(datos_consolidados)
consultas_data <- subset(datos_consolidados, select = columnas_validas)
print("5")
# Identificar columnas tipo character
cols_char <- sapply(consultas_data, is.character)
# Convertir columnas character a numeric
consultas_data[, cols_char] <- lapply(consultas_data[, cols_char], function(x) as.numeric(x))
print("6")
# Crear suma total de consultas
consultas_data$sumaTotal <- rowSums(consultas_data[, -which(names(consultas_data) == "idEstablecimiento")], na.rm = TRUE)
consultas <- data.frame(idEstablecimiento = consultas_data$idEstablecimiento,
Consultas = consultas_data$sumaTotal) %>%
rename("IdEstablecimiento" = "idEstablecimiento") %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(IdEstablecimiento, Consultas)
print("7")
# Definir quirofano
quirofano <- list("idEstablecimiento", "X21220100", "X21220200", "X21220700", "X21220600", "X21400300")
quirofano_data <- subset(datos_consolidados, select = unlist(quirofano))
# Reemplazar comas por puntos y convertir a numérico
quirofano_data <- quirofano_data %>%
mutate(across(-idEstablecimiento, ~ as.numeric(gsub(",", ".", .))))
print("8")
# Crear suma total de quirofano
quirofano_data$sumaTotal <- rowSums(select(quirofano_data, -idEstablecimiento), na.rm = TRUE)
quirofano <- data.frame(idEstablecimiento = quirofano_data$idEstablecimiento,
Quirofano = quirofano_data$sumaTotal) %>%
rename("IdEstablecimiento" = "idEstablecimiento") %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(IdEstablecimiento, Quirofano)
print("9")
# Procesar egresos y predicciones GRD
intermediate_df <- egresos %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
mutate(Egresos.GRD = Prediction * egresos) %>%
select("Region", IdEstablecimiento, "Nombre Establecimiento", Egresos.GRD)
# Combinar datos financieros y días cama disponibles
input <- left_join(financiero, dias_cama_disponibles %>%
select(IdEstablecimiento, dias_cama_disponible), by = "IdEstablecimiento")
print("10")
# Combinar todas las salidas
output <- intermediate_df %>%
left_join(consultas, by = "IdEstablecimiento") %>%
left_join(quirofano, by = "IdEstablecimiento")
# Consolidar todos los datos
all <- inner_join(output, input, by = "IdEstablecimiento") %>%
left_join(hospitales %>% select(IdEstablecimiento, region_id, latitud, longitud), by = "IdEstablecimiento") %>%
relocate(region_id, .after = Region)
return(all)
}
# Datos #
data_2014 <- consolidar_datos_por_anio(2014)
View(data_2014)
data_2015 <- consolidar_datos_por_anio(2015)
data_2016 <- consolidar_datos_por_anio(2016)
View(data_2015)
View(data_2019)
consolidar_datos_por_anio <- function(anio) {
# Establecer directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Definir rutas de archivos utilizando el año como variable
path_hospitales <- paste0("data/", anio, "/", anio, "_hospitals.csv")
print("-")
path_predicciones_grd <- paste0("data/", anio, "/", anio, "_prediciones_grd.txt")
print("-")
path_datos_consolidados <- paste0("data/", anio, "/", anio, "_consolidated_data.csv")
print("-")
path_financiero <- paste0("data/", anio, "/", anio, "_financial_data.csv")
print("-")
path_estadisticas <- "data/Consolidado estadísticas hospitalarias 2014-2021.xlsx"
print("1")
# Cargar datos
hospitales <- read.csv(path_hospitales) %>% rename("IdEstablecimiento" = "hospital_id")
predicciones_grd <- read.csv(path_predicciones_grd, sep=",")
datos_consolidados <- read.table(path_datos_consolidados, sep=";", header=TRUE)
financiero <- read.csv(path_financiero) %>%
select(hospital_id, X21_value, X22_value) %>% rename("IdEstablecimiento" = "hospital_id")
financiero$X21_value <- as.numeric(financiero$X21_value)
financiero$X22_value <- as.numeric(financiero$X22_value)
sheet= (anio - 2014) + 1
print(sheet)
print(anio)
print((anio - 2014) + 1)
estadisticas <- read_excel(path_estadisticas, sheet = (anio - 2014) + 1, skip = 1)  %>%
rename("IdEstablecimiento" = "Cód. Estab.", "Region" = "Nombre SS/SEREMI") %>%
filter(`Nombre Nivel Cuidado` == "Datos Establecimiento") %>%
select(-"Cód. Nivel Cuidado", -"Cód. SS/SEREMI", -"Nombre Nivel Cuidado") %>%
semi_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(1:5)
print("3")
# Procesar estadísticas
dias_cama_disponibles <- estadisticas %>%
filter(Glosa == "Dias Cama Disponibles") %>%
select(1:5) %>% rename("dias_cama_disponible" = "Acum") %>% select(-Glosa)
egresos <- estadisticas %>%
filter(Glosa == "Numero de Egresos") %>%
select(1:5) %>% rename("egresos" = "Acum") %>% select(-Glosa)
print("4")
# Definir consultas
consultas <- list("idEstablecimiento", "X07020130", "X07020230", "X07020330", "X07020331",
"X07020332", "X07024219", "X07020500", "X07020501", "X07020600",
"X07020601", "X07020700", "X07020800", "X07020801", "X07020900",
"X07020901", "X07021000", "X07021001", "X07021100", "X07021101",
"X07021230", "X07021300", "X07021301", "X07022000", "X07022001",
"X07021531", "X07022132", "X07022133", "X07022134", "X07021700",
"X07021800", "X07021801", "X07021900", "X07022130", "X07022142",
"X07022143", "X07022144", "X07022135", "X07022136", "X07022137",
"X07022700", "X07022800", "X07022900", "X07021701", "X07023100",
"X07023200", "X07023201", "X07023202", "X07023203", "X07023700",
"X07023701", "X07023702", "X07023703", "X07024000", "X07024001",
"X07024200", "X07030500", "X07024201", "X07024202", "X07030501",
"X07030502", "X07024900", "X07024915","X07024925","X07024935","X07024920","X07024816","X07024607","X07024817","X07024809","X07024705","X07024506")
print("5")
# Seleccionar y convertir columnas válidas
columnas_validas <- intersect(unlist(consultas), colnames(datos_consolidados))
print("5")
str(columnas_validas)
str(datos_consolidados)
consultas_data <- subset(datos_consolidados, select = columnas_validas)
print("5")
# Identificar columnas tipo character
cols_char <- sapply(consultas_data, is.character)
# Convertir columnas character a numeric
consultas_data[, cols_char] <- lapply(consultas_data[, cols_char], function(x) as.numeric(x))
print("6")
# Crear suma total de consultas
consultas_data$sumaTotal <- rowSums(consultas_data[, -which(names(consultas_data) == "idEstablecimiento")], na.rm = TRUE)
consultas <- data.frame(idEstablecimiento = consultas_data$idEstablecimiento,
Consultas = consultas_data$sumaTotal) %>%
rename("IdEstablecimiento" = "idEstablecimiento") %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(IdEstablecimiento, Consultas)
print("7")
# Definir quirofano
quirofano <- list("idEstablecimiento", "X21220100", "X21220200", "X21220700", "X21220600", "X21400300")
quirofano_data <- subset(datos_consolidados, select = unlist(quirofano))
# Reemplazar comas por puntos y convertir a numérico
quirofano_data <- quirofano_data %>%
mutate(across(-idEstablecimiento, ~ as.numeric(gsub(",", ".", .))))
print("8")
# Crear suma total de quirofano
quirofano_data$sumaTotal <- rowSums(select(quirofano_data, -idEstablecimiento), na.rm = TRUE)
quirofano <- data.frame(idEstablecimiento = quirofano_data$idEstablecimiento,
Quirofano = quirofano_data$sumaTotal) %>%
rename("IdEstablecimiento" = "idEstablecimiento") %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(IdEstablecimiento, Quirofano)
print("9")
# Procesar egresos y predicciones GRD
intermediate_df <- egresos %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
mutate(Egresos.GRD = Prediction * egresos) %>%
select("Region", IdEstablecimiento, "Nombre Establecimiento", Egresos.GRD)
# Combinar datos financieros y días cama disponibles
input <- left_join(financiero, dias_cama_disponibles %>%
select(IdEstablecimiento, dias_cama_disponible), by = "IdEstablecimiento")
print("10")
# Combinar todas las salidas
output <- intermediate_df %>%
left_join(consultas, by = "IdEstablecimiento") %>%
left_join(quirofano, by = "IdEstablecimiento")
# Consolidar todos los datos
all <- inner_join(output, input, by = "IdEstablecimiento") %>%
left_join(hospitales %>% select(IdEstablecimiento, region_id, latitud, longitud), by = "IdEstablecimiento") %>%
relocate(region_id, .after = Region)
return(all)
}
# Datos #
data_2014 <- consolidar_datos_por_anio(2014)
View(data_2014)
consolidar_datos_por_anio <- function(anio) {
# Establecer directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Definir rutas de archivos utilizando el año como variable
path_hospitales <- paste0("data/", anio, "/", anio, "_hospitals.csv")
print("-")
path_predicciones_grd <- paste0("data/", anio, "/", anio, "_prediciones_grd.txt")
print("-")
path_datos_consolidados <- paste0("data/", anio, "/", anio, "_consolidated_data.csv")
print("-")
path_financiero <- paste0("data/", anio, "/", anio, "_financial_data.csv")
print("-")
path_estadisticas <- "data/Consolidado estadísticas hospitalarias 2014-2021.xlsx"
print("1")
# Cargar datos
hospitales <- read.csv(path_hospitales) %>% rename("IdEstablecimiento" = "hospital_id")
predicciones_grd <- read.csv(path_predicciones_grd, sep=",")
datos_consolidados <- read.table(path_datos_consolidados, sep=";", header=TRUE)
financiero <- read.csv(path_financiero) %>%
select(hospital_id, X21_value, X22_value) %>% rename("IdEstablecimiento" = "hospital_id")
financiero$X21_value <- as.numeric(financiero$X21_value)
financiero$X22_value <- as.numeric(financiero$X22_value)
sheet= (anio - 2014) + 1
print(sheet)
print(anio)
print((anio - 2014) + 1)
estadisticas <- read_excel(path_estadisticas, sheet = (anio - 2014) + 1, skip = 1)  %>%
rename("IdEstablecimiento" = "Cód. Estab.", "Region" = "Nombre SS/SEREMI") %>%
filter(`Nombre Nivel Cuidado` == "Datos Establecimiento") %>%
select(-"Cód. Nivel Cuidado", -"Cód. SS/SEREMI", -"Nombre Nivel Cuidado") %>%
semi_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(1:5)
print("3")
# Procesar estadísticas
dias_cama_disponibles <- estadisticas %>%
filter(Glosa == "Dias Cama Disponibles") %>%
select(1:5) %>% rename("dias_cama_disponible" = "Acum") %>% select(-Glosa)
egresos <- estadisticas %>%
filter(Glosa == "Numero de Egresos") %>%
select(1:5) %>% rename("egresos" = "Acum") %>% select(-Glosa)
print("4")
# Definir consultas
#consultas <- list("idEstablecimiento", "X07020130", "X07020230", "X07020330", "X07020331",
#                  "X07020332", "X07024219", "X07020500", "X07020501", "X07020600",
#                  "X07020601", "X07020700", "X07020800", "X07020801", "X07020900",
#                  "X07020901", "X07021000", "X07021001", "X07021100", "X07021101",
#                  "X07021230", "X07021300", "X07021301", "X07022000", "X07022001",
#                  "X07021531", "X07022132", "X07022133", "X07022134", "X07021700",
#                  "X07021800", "X07021801", "X07021900", "X07022130", "X07022142",
#                  "X07022143", "X07022144", "X07022135", "X07022136", "X07022137",
#                  "X07022700", "X07022800", "X07022900", "X07021701", "X07023100",
#                  "X07023200", "X07023201", "X07023202", "X07023203", "X07023700",
#                  "X07023701", "X07023702", "X07023703", "X07024000", "X07024001",
#                  "X07024200", "X07030500", "X07024201", "X07024202", "X07030501",
#                  "X07030502", "X07024900", "X07024915","X07024925","X07024935","X07024920","X07024816","X07024607","X07024817","X07024809","X07024705","X07024506")
consultas <- list("idEstablecimiento", "X07020130", "X07020230", "X07020330", "X07020400",
"X07020500", "X07020600", "X07020700", "X07020800", "X07020900", "X07024970",
"X07021000", "X07021100", "X07021230", "X07021300", "X07021400", "X07024980",
"X07021531", "X07021600", "X07021700", "X07021800", "X07021900", "X07022000",
"X07022130", "X07022131", "X07022200", "X07022330", "X07024990", "X07022400",
"X07022500", "X07022631", "X07022700", "X07022800", "X07022900", "X07023000",
"X07023100", "X07023200", "X07023400", "X070251000", "X07030100", "X07023600",
"X070251100", "X07023700", "X07023800", "X07023900", "X07024000", "X07024200",
"X07024900", "X07024915", "X07024925", "X07024935", "X07024920", "X07024816",
"X07024607", "X07024817", "X07024809", "X07024705", "X07024506", "X07024930",
"X07024940", "X070251200", "X070251300", "X070251400", "X07030100A", "X07030200",
"X07030300", "X07030400", "X07024950", "X07024960", "X07024814", "X07024815",
"X07030500", "X07030600", "X070251500", "X070251600", "X070251700", "X070251800",
"X070251900", "X070252000", "X070252100", "X070252200", "X070252300", "X070252400",
"X070252500", "X070252600", "X07030700", "X07030800", "X07030900", "X07031000",
"X07025300", "X07025310", "X07025320", "X07025330", "X07025340", "X07031100",
"X07031200", "X07025350", "X07031200A", "X07031300", "X07031400", "X07031500",
"X07031600", "X07031700", "X07031800", "X07031900", "X07032000", "X07032100",
"X07032200", "X07032300", "X07032400", "X07032500", "X07032600", "X07032700",
"X07032800", "X07032900", "X07033000", "X07033100", "X07033200", "X07033300",
"X07033400", "X07033500", "X07033600", "X07033700", "X07033800", "X07033900",
"X07034000", "X07034100", "X07034200", "X07034300", "X07034400", "X07034500",
"X07034600", "X07034700", "X07034800", "X07034900", "X07035000", "X07035100",
"X07035200", "X07035300")
print("5")
# Seleccionar y convertir columnas válidas
columnas_validas <- intersect(unlist(consultas), colnames(datos_consolidados))
print("5")
str(columnas_validas)
str(datos_consolidados)
consultas_data <- subset(datos_consolidados, select = columnas_validas)
print("5")
# Identificar columnas tipo character
cols_char <- sapply(consultas_data, is.character)
# Convertir columnas character a numeric
consultas_data[, cols_char] <- lapply(consultas_data[, cols_char], function(x) as.numeric(x))
print("6")
# Crear suma total de consultas
consultas_data$sumaTotal <- rowSums(consultas_data[, -which(names(consultas_data) == "idEstablecimiento")], na.rm = TRUE)
consultas <- data.frame(idEstablecimiento = consultas_data$idEstablecimiento,
Consultas = consultas_data$sumaTotal) %>%
rename("IdEstablecimiento" = "idEstablecimiento") %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(IdEstablecimiento, Consultas)
print("7")
# Definir quirofano
quirofano <- list("idEstablecimiento", "X21220100", "X21220200", "X21220700", "X21220600", "X21400300")
quirofano_data <- subset(datos_consolidados, select = unlist(quirofano))
# Reemplazar comas por puntos y convertir a numérico
quirofano_data <- quirofano_data %>%
mutate(across(-idEstablecimiento, ~ as.numeric(gsub(",", ".", .))))
print("8")
# Crear suma total de quirofano
quirofano_data$sumaTotal <- rowSums(select(quirofano_data, -idEstablecimiento), na.rm = TRUE)
quirofano <- data.frame(idEstablecimiento = quirofano_data$idEstablecimiento,
Quirofano = quirofano_data$sumaTotal) %>%
rename("IdEstablecimiento" = "idEstablecimiento") %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(IdEstablecimiento, Quirofano)
print("9")
# Procesar egresos y predicciones GRD
intermediate_df <- egresos %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
mutate(Egresos.GRD = Prediction * egresos) %>%
select("Region", IdEstablecimiento, "Nombre Establecimiento", Egresos.GRD)
# Combinar datos financieros y días cama disponibles
input <- left_join(financiero, dias_cama_disponibles %>%
select(IdEstablecimiento, dias_cama_disponible), by = "IdEstablecimiento")
print("10")
# Combinar todas las salidas
output <- intermediate_df %>%
left_join(consultas, by = "IdEstablecimiento") %>%
left_join(quirofano, by = "IdEstablecimiento")
# Consolidar todos los datos
all <- inner_join(output, input, by = "IdEstablecimiento") %>%
left_join(hospitales %>% select(IdEstablecimiento, region_id, latitud, longitud), by = "IdEstablecimiento") %>%
relocate(region_id, .after = Region)
return(all)
}
View(data_2014)
# Datos #
data_2014 <- consolidar_datos_por_anio(2014)
data_2015 <- consolidar_datos_por_anio(2015)
consolidar_datos_por_anio <- function(anio) {
# Establecer directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Definir rutas de archivos utilizando el año como variable
path_hospitales <- paste0("data/", anio, "/", anio, "_hospitals.csv")
print("-")
path_predicciones_grd <- paste0("data/", anio, "/", anio, "_prediciones_grd.txt")
print("-")
path_datos_consolidados <- paste0("data/", anio, "/", anio, "_consolidated_data.csv")
print("-")
path_financiero <- paste0("data/", anio, "/", anio, "_financial_data.csv")
print("-")
path_estadisticas <- "data/Consolidado estadísticas hospitalarias 2014-2021.xlsx"
print("1")
# Cargar datos
hospitales <- read.csv(path_hospitales) %>% rename("IdEstablecimiento" = "hospital_id")
predicciones_grd <- read.csv(path_predicciones_grd, sep=",")
datos_consolidados <- read.table(path_datos_consolidados, sep=";", header=TRUE)
financiero <- read.csv(path_financiero) %>%
select(hospital_id, X21_value, X22_value) %>% rename("IdEstablecimiento" = "hospital_id")
financiero$X21_value <- as.numeric(financiero$X21_value)
financiero$X22_value <- as.numeric(financiero$X22_value)
sheet= (anio - 2014) + 1
print(sheet)
print(anio)
print((anio - 2014) + 1)
estadisticas <- read_excel(path_estadisticas, sheet = (anio - 2014) + 1, skip = 1)  %>%
rename("IdEstablecimiento" = "Cód. Estab.", "Region" = "Nombre SS/SEREMI") %>%
filter(`Nombre Nivel Cuidado` == "Datos Establecimiento") %>%
select(-"Cód. Nivel Cuidado", -"Cód. SS/SEREMI", -"Nombre Nivel Cuidado") %>%
semi_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(1:5)
print("3")
# Procesar estadísticas
dias_cama_disponibles <- estadisticas %>%
filter(Glosa == "Dias Cama Disponibles") %>%
select(1:5) %>% rename("dias_cama_disponible" = "Acum") %>% select(-Glosa)
egresos <- estadisticas %>%
filter(Glosa == "Numero de Egresos") %>%
select(1:5) %>% rename("egresos" = "Acum") %>% select(-Glosa)
print("4")
# Definir consultas
#consultas <- list("idEstablecimiento", "X07020130", "X07020230", "X07020330", "X07020331",
#                  "X07020332", "X07024219", "X07020500", "X07020501", "X07020600",
#                  "X07020601", "X07020700", "X07020800", "X07020801", "X07020900",
#                  "X07020901", "X07021000", "X07021001", "X07021100", "X07021101",
#                  "X07021230", "X07021300", "X07021301", "X07022000", "X07022001",
#                  "X07021531", "X07022132", "X07022133", "X07022134", "X07021700",
#                  "X07021800", "X07021801", "X07021900", "X07022130", "X07022142",
#                  "X07022143", "X07022144", "X07022135", "X07022136", "X07022137",
#                  "X07022700", "X07022800", "X07022900", "X07021701", "X07023100",
#                  "X07023200", "X07023201", "X07023202", "X07023203", "X07023700",
#                  "X07023701", "X07023702", "X07023703", "X07024000", "X07024001",
#                  "X07024200", "X07030500", "X07024201", "X07024202", "X07030501",
#                  "X07030502", "X07024900", "X07024915","X07024925","X07024935","X07024920","X07024816","X07024607","X07024817","X07024809","X07024705","X07024506")
consultas <- list("idEstablecimiento", "X07020130", "X07020230", "X07020330", "X07020400",
"X07020500", "X07020600", "X07020700", "X07020800", "X07020900", "X07024970",
"X07021000", "X07021100", "X07021230", "X07021300", "X07021400", "X07024980",
"X07021531", "X07021600", "X07021700", "X07021800", "X07021900", "X07022000",
"X07022130", "X07022131", "X07022200", "X07022330", "X07024990", "X07022400",
"X07022500", "X07022631", "X07022700", "X07022800", "X07022900", "X07023000",
"X07023100", "X07023200", "X07023400", "X070251000", "X07030100", "X07023600",
"X070251100", "X07023700", "X07023800", "X07023900", "X07024000", "X07024200",
"X07024900", "X07024915", "X07024925", "X07024935", "X07024920", "X07024816",
"X07024607", "X07024817", "X07024809", "X07024705", "X07024506", "X07024930",
"X07024940", "X070251200", "X070251300", "X070251400", "X07030100A", "X07030200",
"X07030300", "X07030400", "X07024950", "X07024960", "X07024814", "X07024815",
"X07030500", "X07030600", "X070251500", "X070251600", "X070251700", "X070251800",
"X070251900", "X070252000", "X070252100", "X070252200", "X070252300", "X070252400",
"X070252500", "X070252600", "X07030700", "X07030800", "X07030900", "X07031000",
"X07025300", "X07025310", "X07025320", "X07025330", "X07025340", "X07031100",
"X07031200", "X07025350", "X07031200A", "X07031300", "X07031400", "X07031500",
"X07031600", "X07031700", "X07031800", "X07031900", "X07032000", "X07032100",
"X07032200", "X07032300", "X07032400", "X07032500", "X07032600", "X07032700",
"X07032800", "X07032900", "X07033000", "X07033100", "X07033200", "X07033300",
"X07033400", "X07033500", "X07033600", "X07033700", "X07033800", "X07033900",
"X07034000", "X07034100", "X07034200", "X07034300", "X07034400", "X07034500",
"X07034600", "X07034700", "X07034800", "X07034900", "X07035000", "X07035100",
"X07035200", "X07035300")
print("5")
# Seleccionar y convertir columnas válidas
columnas_validas <- intersect(unlist(consultas), colnames(datos_consolidados))
print("5")
str(columnas_validas)
str(datos_consolidados)
consultas_data <- subset(datos_consolidados, select = columnas_validas)
print("5")
# Identificar columnas tipo character
cols_char <- sapply(consultas_data, is.character)
# Convertir columnas character a numeric
consultas_data[, cols_char] <- lapply(consultas_data[, cols_char], function(x) as.numeric(x))
print("6")
# Crear suma total de consultas
consultas_data$sumaTotal <- rowSums(consultas_data[, -which(names(consultas_data) == "idEstablecimiento")], na.rm = TRUE)
consultas <- data.frame(idEstablecimiento = consultas_data$idEstablecimiento,
Consultas = consultas_data$sumaTotal) %>%
rename("IdEstablecimiento" = "idEstablecimiento") %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(IdEstablecimiento, Consultas)
print("7")
# Definir quirofano
quirofano <- list("idEstablecimiento", "X21220100", "X21220200", "X21220700", "X21220600", "X21400300", "X21220900",
"X21400500","X21400600","X21800810")
quirofano_data <- subset(datos_consolidados, select = unlist(quirofano))
# Reemplazar comas por puntos y convertir a numérico
quirofano_data <- quirofano_data %>%
mutate(across(-idEstablecimiento, ~ as.numeric(gsub(",", ".", .))))
print("8")
# Crear suma total de quirofano
quirofano_data$sumaTotal <- rowSums(select(quirofano_data, -idEstablecimiento), na.rm = TRUE)
quirofano <- data.frame(idEstablecimiento = quirofano_data$idEstablecimiento,
Quirofano = quirofano_data$sumaTotal) %>%
rename("IdEstablecimiento" = "idEstablecimiento") %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
select(IdEstablecimiento, Quirofano)
print("9")
# Procesar egresos y predicciones GRD
intermediate_df <- egresos %>%
inner_join(predicciones_grd, by = "IdEstablecimiento") %>%
mutate(Egresos.GRD = Prediction * egresos) %>%
select("Region", IdEstablecimiento, "Nombre Establecimiento", Egresos.GRD)
# Combinar datos financieros y días cama disponibles
input <- left_join(financiero, dias_cama_disponibles %>%
select(IdEstablecimiento, dias_cama_disponible), by = "IdEstablecimiento")
print("10")
# Combinar todas las salidas
output <- intermediate_df %>%
left_join(consultas, by = "IdEstablecimiento") %>%
left_join(quirofano, by = "IdEstablecimiento")
# Consolidar todos los datos
all <- inner_join(output, input, by = "IdEstablecimiento") %>%
left_join(hospitales %>% select(IdEstablecimiento, region_id, latitud, longitud), by = "IdEstablecimiento") %>%
relocate(region_id, .after = Region)
return(all)
}
# Datos #
data_2014 <- consolidar_datos_por_anio(2014)
View(data_2014)
data_2020 <- consolidar_datos_por_anio(2020)
View(data_2020)
